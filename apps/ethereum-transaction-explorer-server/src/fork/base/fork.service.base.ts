/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fork as PrismaFork } from "@prisma/client";

export class ForkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ForkCountArgs, "select">): Promise<number> {
    return this.prisma.fork.count(args);
  }

  async forks(args: Prisma.ForkFindManyArgs): Promise<PrismaFork[]> {
    return this.prisma.fork.findMany(args);
  }
  async fork(args: Prisma.ForkFindUniqueArgs): Promise<PrismaFork | null> {
    return this.prisma.fork.findUnique(args);
  }
  async createFork(args: Prisma.ForkCreateArgs): Promise<PrismaFork> {
    return this.prisma.fork.create(args);
  }
  async updateFork(args: Prisma.ForkUpdateArgs): Promise<PrismaFork> {
    return this.prisma.fork.update(args);
  }
  async deleteFork(args: Prisma.ForkDeleteArgs): Promise<PrismaFork> {
    return this.prisma.fork.delete(args);
  }
}
