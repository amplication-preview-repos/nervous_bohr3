/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ForkService } from "../fork.service";
import { ForkCreateInput } from "./ForkCreateInput";
import { Fork } from "./Fork";
import { ForkFindManyArgs } from "./ForkFindManyArgs";
import { ForkWhereUniqueInput } from "./ForkWhereUniqueInput";
import { ForkUpdateInput } from "./ForkUpdateInput";

export class ForkControllerBase {
  constructor(protected readonly service: ForkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fork })
  async createFork(@common.Body() data: ForkCreateInput): Promise<Fork> {
    return await this.service.createFork({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fork] })
  @ApiNestedQuery(ForkFindManyArgs)
  async forks(@common.Req() request: Request): Promise<Fork[]> {
    const args = plainToClass(ForkFindManyArgs, request.query);
    return this.service.forks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fork(
    @common.Param() params: ForkWhereUniqueInput
  ): Promise<Fork | null> {
    const result = await this.service.fork({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFork(
    @common.Param() params: ForkWhereUniqueInput,
    @common.Body() data: ForkUpdateInput
  ): Promise<Fork | null> {
    try {
      return await this.service.updateFork({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFork(
    @common.Param() params: ForkWhereUniqueInput
  ): Promise<Fork | null> {
    try {
      return await this.service.deleteFork({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
