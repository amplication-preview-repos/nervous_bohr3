/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BugBountyService } from "../bugBounty.service";
import { BugBountyCreateInput } from "./BugBountyCreateInput";
import { BugBounty } from "./BugBounty";
import { BugBountyFindManyArgs } from "./BugBountyFindManyArgs";
import { BugBountyWhereUniqueInput } from "./BugBountyWhereUniqueInput";
import { BugBountyUpdateInput } from "./BugBountyUpdateInput";

export class BugBountyControllerBase {
  constructor(protected readonly service: BugBountyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BugBounty })
  async createBugBounty(
    @common.Body() data: BugBountyCreateInput
  ): Promise<BugBounty> {
    return await this.service.createBugBounty({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BugBounty] })
  @ApiNestedQuery(BugBountyFindManyArgs)
  async bugBounties(@common.Req() request: Request): Promise<BugBounty[]> {
    const args = plainToClass(BugBountyFindManyArgs, request.query);
    return this.service.bugBounties({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BugBounty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bugBounty(
    @common.Param() params: BugBountyWhereUniqueInput
  ): Promise<BugBounty | null> {
    const result = await this.service.bugBounty({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BugBounty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBugBounty(
    @common.Param() params: BugBountyWhereUniqueInput,
    @common.Body() data: BugBountyUpdateInput
  ): Promise<BugBounty | null> {
    try {
      return await this.service.updateBugBounty({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BugBounty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBugBounty(
    @common.Param() params: BugBountyWhereUniqueInput
  ): Promise<BugBounty | null> {
    try {
      return await this.service.deleteBugBounty({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
