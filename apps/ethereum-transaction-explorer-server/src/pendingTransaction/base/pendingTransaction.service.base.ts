/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PendingTransaction as PrismaPendingTransaction,
} from "@prisma/client";

export class PendingTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PendingTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pendingTransaction.count(args);
  }

  async pendingTransactions(
    args: Prisma.PendingTransactionFindManyArgs
  ): Promise<PrismaPendingTransaction[]> {
    return this.prisma.pendingTransaction.findMany(args);
  }
  async pendingTransaction(
    args: Prisma.PendingTransactionFindUniqueArgs
  ): Promise<PrismaPendingTransaction | null> {
    return this.prisma.pendingTransaction.findUnique(args);
  }
  async createPendingTransaction(
    args: Prisma.PendingTransactionCreateArgs
  ): Promise<PrismaPendingTransaction> {
    return this.prisma.pendingTransaction.create(args);
  }
  async updatePendingTransaction(
    args: Prisma.PendingTransactionUpdateArgs
  ): Promise<PrismaPendingTransaction> {
    return this.prisma.pendingTransaction.update(args);
  }
  async deletePendingTransaction(
    args: Prisma.PendingTransactionDeleteArgs
  ): Promise<PrismaPendingTransaction> {
    return this.prisma.pendingTransaction.delete(args);
  }
}
