/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PendingTransactionService } from "../pendingTransaction.service";
import { PendingTransactionCreateInput } from "./PendingTransactionCreateInput";
import { PendingTransaction } from "./PendingTransaction";
import { PendingTransactionFindManyArgs } from "./PendingTransactionFindManyArgs";
import { PendingTransactionWhereUniqueInput } from "./PendingTransactionWhereUniqueInput";
import { PendingTransactionUpdateInput } from "./PendingTransactionUpdateInput";

export class PendingTransactionControllerBase {
  constructor(protected readonly service: PendingTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PendingTransaction })
  async createPendingTransaction(
    @common.Body() data: PendingTransactionCreateInput
  ): Promise<PendingTransaction> {
    return await this.service.createPendingTransaction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PendingTransaction] })
  @ApiNestedQuery(PendingTransactionFindManyArgs)
  async pendingTransactions(
    @common.Req() request: Request
  ): Promise<PendingTransaction[]> {
    const args = plainToClass(PendingTransactionFindManyArgs, request.query);
    return this.service.pendingTransactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PendingTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pendingTransaction(
    @common.Param() params: PendingTransactionWhereUniqueInput
  ): Promise<PendingTransaction | null> {
    const result = await this.service.pendingTransaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PendingTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePendingTransaction(
    @common.Param() params: PendingTransactionWhereUniqueInput,
    @common.Body() data: PendingTransactionUpdateInput
  ): Promise<PendingTransaction | null> {
    try {
      return await this.service.updatePendingTransaction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PendingTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePendingTransaction(
    @common.Param() params: PendingTransactionWhereUniqueInput
  ): Promise<PendingTransaction | null> {
    try {
      return await this.service.deletePendingTransaction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
