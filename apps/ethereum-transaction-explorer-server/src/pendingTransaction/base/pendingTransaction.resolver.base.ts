/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PendingTransaction } from "./PendingTransaction";
import { PendingTransactionCountArgs } from "./PendingTransactionCountArgs";
import { PendingTransactionFindManyArgs } from "./PendingTransactionFindManyArgs";
import { PendingTransactionFindUniqueArgs } from "./PendingTransactionFindUniqueArgs";
import { DeletePendingTransactionArgs } from "./DeletePendingTransactionArgs";
import { PendingTransactionService } from "../pendingTransaction.service";
@graphql.Resolver(() => PendingTransaction)
export class PendingTransactionResolverBase {
  constructor(protected readonly service: PendingTransactionService) {}

  async _pendingTransactionsMeta(
    @graphql.Args() args: PendingTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PendingTransaction])
  async pendingTransactions(
    @graphql.Args() args: PendingTransactionFindManyArgs
  ): Promise<PendingTransaction[]> {
    return this.service.pendingTransactions(args);
  }

  @graphql.Query(() => PendingTransaction, { nullable: true })
  async pendingTransaction(
    @graphql.Args() args: PendingTransactionFindUniqueArgs
  ): Promise<PendingTransaction | null> {
    const result = await this.service.pendingTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PendingTransaction)
  async deletePendingTransaction(
    @graphql.Args() args: DeletePendingTransactionArgs
  ): Promise<PendingTransaction | null> {
    try {
      return await this.service.deletePendingTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
