/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OracleService } from "../oracle.service";
import { OracleCreateInput } from "./OracleCreateInput";
import { Oracle } from "./Oracle";
import { OracleFindManyArgs } from "./OracleFindManyArgs";
import { OracleWhereUniqueInput } from "./OracleWhereUniqueInput";
import { OracleUpdateInput } from "./OracleUpdateInput";

export class OracleControllerBase {
  constructor(protected readonly service: OracleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Oracle })
  async createOracle(@common.Body() data: OracleCreateInput): Promise<Oracle> {
    return await this.service.createOracle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Oracle] })
  @ApiNestedQuery(OracleFindManyArgs)
  async oracles(@common.Req() request: Request): Promise<Oracle[]> {
    const args = plainToClass(OracleFindManyArgs, request.query);
    return this.service.oracles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Oracle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async oracle(
    @common.Param() params: OracleWhereUniqueInput
  ): Promise<Oracle | null> {
    const result = await this.service.oracle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Oracle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOracle(
    @common.Param() params: OracleWhereUniqueInput,
    @common.Body() data: OracleUpdateInput
  ): Promise<Oracle | null> {
    try {
      return await this.service.updateOracle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Oracle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOracle(
    @common.Param() params: OracleWhereUniqueInput
  ): Promise<Oracle | null> {
    try {
      return await this.service.deleteOracle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
