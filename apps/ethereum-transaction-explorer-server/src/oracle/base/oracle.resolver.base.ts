/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Oracle } from "./Oracle";
import { OracleCountArgs } from "./OracleCountArgs";
import { OracleFindManyArgs } from "./OracleFindManyArgs";
import { OracleFindUniqueArgs } from "./OracleFindUniqueArgs";
import { DeleteOracleArgs } from "./DeleteOracleArgs";
import { OracleService } from "../oracle.service";
@graphql.Resolver(() => Oracle)
export class OracleResolverBase {
  constructor(protected readonly service: OracleService) {}

  async _oraclesMeta(
    @graphql.Args() args: OracleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Oracle])
  async oracles(@graphql.Args() args: OracleFindManyArgs): Promise<Oracle[]> {
    return this.service.oracles(args);
  }

  @graphql.Query(() => Oracle, { nullable: true })
  async oracle(
    @graphql.Args() args: OracleFindUniqueArgs
  ): Promise<Oracle | null> {
    const result = await this.service.oracle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Oracle)
  async deleteOracle(
    @graphql.Args() args: DeleteOracleArgs
  ): Promise<Oracle | null> {
    try {
      return await this.service.deleteOracle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
