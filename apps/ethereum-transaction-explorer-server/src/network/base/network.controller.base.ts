/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NetworkService } from "../network.service";
import { NetworkCreateInput } from "./NetworkCreateInput";
import { Network } from "./Network";
import { NetworkFindManyArgs } from "./NetworkFindManyArgs";
import { NetworkWhereUniqueInput } from "./NetworkWhereUniqueInput";
import { NetworkUpdateInput } from "./NetworkUpdateInput";

export class NetworkControllerBase {
  constructor(protected readonly service: NetworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Network })
  async createNetwork(
    @common.Body() data: NetworkCreateInput
  ): Promise<Network> {
    return await this.service.createNetwork({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Network] })
  @ApiNestedQuery(NetworkFindManyArgs)
  async networks(@common.Req() request: Request): Promise<Network[]> {
    const args = plainToClass(NetworkFindManyArgs, request.query);
    return this.service.networks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Network })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async network(
    @common.Param() params: NetworkWhereUniqueInput
  ): Promise<Network | null> {
    const result = await this.service.network({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Network })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNetwork(
    @common.Param() params: NetworkWhereUniqueInput,
    @common.Body() data: NetworkUpdateInput
  ): Promise<Network | null> {
    try {
      return await this.service.updateNetwork({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Network })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNetwork(
    @common.Param() params: NetworkWhereUniqueInput
  ): Promise<Network | null> {
    try {
      return await this.service.deleteNetwork({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
