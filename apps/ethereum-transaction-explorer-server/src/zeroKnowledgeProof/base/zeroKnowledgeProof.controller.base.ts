/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ZeroKnowledgeProofService } from "../zeroKnowledgeProof.service";
import { ZeroKnowledgeProofCreateInput } from "./ZeroKnowledgeProofCreateInput";
import { ZeroKnowledgeProof } from "./ZeroKnowledgeProof";
import { ZeroKnowledgeProofFindManyArgs } from "./ZeroKnowledgeProofFindManyArgs";
import { ZeroKnowledgeProofWhereUniqueInput } from "./ZeroKnowledgeProofWhereUniqueInput";
import { ZeroKnowledgeProofUpdateInput } from "./ZeroKnowledgeProofUpdateInput";

export class ZeroKnowledgeProofControllerBase {
  constructor(protected readonly service: ZeroKnowledgeProofService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ZeroKnowledgeProof })
  async createZeroKnowledgeProof(
    @common.Body() data: ZeroKnowledgeProofCreateInput
  ): Promise<ZeroKnowledgeProof> {
    return await this.service.createZeroKnowledgeProof({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ZeroKnowledgeProof] })
  @ApiNestedQuery(ZeroKnowledgeProofFindManyArgs)
  async zeroKnowledgeProofs(
    @common.Req() request: Request
  ): Promise<ZeroKnowledgeProof[]> {
    const args = plainToClass(ZeroKnowledgeProofFindManyArgs, request.query);
    return this.service.zeroKnowledgeProofs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ZeroKnowledgeProof })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async zeroKnowledgeProof(
    @common.Param() params: ZeroKnowledgeProofWhereUniqueInput
  ): Promise<ZeroKnowledgeProof | null> {
    const result = await this.service.zeroKnowledgeProof({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ZeroKnowledgeProof })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateZeroKnowledgeProof(
    @common.Param() params: ZeroKnowledgeProofWhereUniqueInput,
    @common.Body() data: ZeroKnowledgeProofUpdateInput
  ): Promise<ZeroKnowledgeProof | null> {
    try {
      return await this.service.updateZeroKnowledgeProof({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ZeroKnowledgeProof })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteZeroKnowledgeProof(
    @common.Param() params: ZeroKnowledgeProofWhereUniqueInput
  ): Promise<ZeroKnowledgeProof | null> {
    try {
      return await this.service.deleteZeroKnowledgeProof({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
