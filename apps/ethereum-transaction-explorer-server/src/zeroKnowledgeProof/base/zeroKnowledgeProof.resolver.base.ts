/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ZeroKnowledgeProof } from "./ZeroKnowledgeProof";
import { ZeroKnowledgeProofCountArgs } from "./ZeroKnowledgeProofCountArgs";
import { ZeroKnowledgeProofFindManyArgs } from "./ZeroKnowledgeProofFindManyArgs";
import { ZeroKnowledgeProofFindUniqueArgs } from "./ZeroKnowledgeProofFindUniqueArgs";
import { DeleteZeroKnowledgeProofArgs } from "./DeleteZeroKnowledgeProofArgs";
import { ZeroKnowledgeProofService } from "../zeroKnowledgeProof.service";
@graphql.Resolver(() => ZeroKnowledgeProof)
export class ZeroKnowledgeProofResolverBase {
  constructor(protected readonly service: ZeroKnowledgeProofService) {}

  async _zeroKnowledgeProofsMeta(
    @graphql.Args() args: ZeroKnowledgeProofCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ZeroKnowledgeProof])
  async zeroKnowledgeProofs(
    @graphql.Args() args: ZeroKnowledgeProofFindManyArgs
  ): Promise<ZeroKnowledgeProof[]> {
    return this.service.zeroKnowledgeProofs(args);
  }

  @graphql.Query(() => ZeroKnowledgeProof, { nullable: true })
  async zeroKnowledgeProof(
    @graphql.Args() args: ZeroKnowledgeProofFindUniqueArgs
  ): Promise<ZeroKnowledgeProof | null> {
    const result = await this.service.zeroKnowledgeProof(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ZeroKnowledgeProof)
  async deleteZeroKnowledgeProof(
    @graphql.Args() args: DeleteZeroKnowledgeProofArgs
  ): Promise<ZeroKnowledgeProof | null> {
    try {
      return await this.service.deleteZeroKnowledgeProof(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
