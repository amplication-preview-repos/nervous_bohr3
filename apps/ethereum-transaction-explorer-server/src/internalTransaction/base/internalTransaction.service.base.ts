/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  InternalTransaction as PrismaInternalTransaction,
} from "@prisma/client";

export class InternalTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InternalTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.internalTransaction.count(args);
  }

  async internalTransactions(
    args: Prisma.InternalTransactionFindManyArgs
  ): Promise<PrismaInternalTransaction[]> {
    return this.prisma.internalTransaction.findMany(args);
  }
  async internalTransaction(
    args: Prisma.InternalTransactionFindUniqueArgs
  ): Promise<PrismaInternalTransaction | null> {
    return this.prisma.internalTransaction.findUnique(args);
  }
  async createInternalTransaction(
    args: Prisma.InternalTransactionCreateArgs
  ): Promise<PrismaInternalTransaction> {
    return this.prisma.internalTransaction.create(args);
  }
  async updateInternalTransaction(
    args: Prisma.InternalTransactionUpdateArgs
  ): Promise<PrismaInternalTransaction> {
    return this.prisma.internalTransaction.update(args);
  }
  async deleteInternalTransaction(
    args: Prisma.InternalTransactionDeleteArgs
  ): Promise<PrismaInternalTransaction> {
    return this.prisma.internalTransaction.delete(args);
  }
}
