/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternalTransactionService } from "../internalTransaction.service";
import { InternalTransactionCreateInput } from "./InternalTransactionCreateInput";
import { InternalTransaction } from "./InternalTransaction";
import { InternalTransactionFindManyArgs } from "./InternalTransactionFindManyArgs";
import { InternalTransactionWhereUniqueInput } from "./InternalTransactionWhereUniqueInput";
import { InternalTransactionUpdateInput } from "./InternalTransactionUpdateInput";

export class InternalTransactionControllerBase {
  constructor(protected readonly service: InternalTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternalTransaction })
  async createInternalTransaction(
    @common.Body() data: InternalTransactionCreateInput
  ): Promise<InternalTransaction> {
    return await this.service.createInternalTransaction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternalTransaction] })
  @ApiNestedQuery(InternalTransactionFindManyArgs)
  async internalTransactions(
    @common.Req() request: Request
  ): Promise<InternalTransaction[]> {
    const args = plainToClass(InternalTransactionFindManyArgs, request.query);
    return this.service.internalTransactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternalTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internalTransaction(
    @common.Param() params: InternalTransactionWhereUniqueInput
  ): Promise<InternalTransaction | null> {
    const result = await this.service.internalTransaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternalTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternalTransaction(
    @common.Param() params: InternalTransactionWhereUniqueInput,
    @common.Body() data: InternalTransactionUpdateInput
  ): Promise<InternalTransaction | null> {
    try {
      return await this.service.updateInternalTransaction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternalTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternalTransaction(
    @common.Param() params: InternalTransactionWhereUniqueInput
  ): Promise<InternalTransaction | null> {
    try {
      return await this.service.deleteInternalTransaction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
