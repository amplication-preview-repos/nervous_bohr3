/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GovernanceService } from "../governance.service";
import { GovernanceCreateInput } from "./GovernanceCreateInput";
import { Governance } from "./Governance";
import { GovernanceFindManyArgs } from "./GovernanceFindManyArgs";
import { GovernanceWhereUniqueInput } from "./GovernanceWhereUniqueInput";
import { GovernanceUpdateInput } from "./GovernanceUpdateInput";

export class GovernanceControllerBase {
  constructor(protected readonly service: GovernanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Governance })
  async createGovernance(
    @common.Body() data: GovernanceCreateInput
  ): Promise<Governance> {
    return await this.service.createGovernance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Governance] })
  @ApiNestedQuery(GovernanceFindManyArgs)
  async governances(@common.Req() request: Request): Promise<Governance[]> {
    const args = plainToClass(GovernanceFindManyArgs, request.query);
    return this.service.governances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Governance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async governance(
    @common.Param() params: GovernanceWhereUniqueInput
  ): Promise<Governance | null> {
    const result = await this.service.governance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Governance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGovernance(
    @common.Param() params: GovernanceWhereUniqueInput,
    @common.Body() data: GovernanceUpdateInput
  ): Promise<Governance | null> {
    try {
      return await this.service.updateGovernance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Governance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGovernance(
    @common.Param() params: GovernanceWhereUniqueInput
  ): Promise<Governance | null> {
    try {
      return await this.service.deleteGovernance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
