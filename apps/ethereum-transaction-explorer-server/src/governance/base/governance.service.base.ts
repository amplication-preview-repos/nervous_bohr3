/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Governance as PrismaGovernance } from "@prisma/client";

export class GovernanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GovernanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.governance.count(args);
  }

  async governances(
    args: Prisma.GovernanceFindManyArgs
  ): Promise<PrismaGovernance[]> {
    return this.prisma.governance.findMany(args);
  }
  async governance(
    args: Prisma.GovernanceFindUniqueArgs
  ): Promise<PrismaGovernance | null> {
    return this.prisma.governance.findUnique(args);
  }
  async createGovernance(
    args: Prisma.GovernanceCreateArgs
  ): Promise<PrismaGovernance> {
    return this.prisma.governance.create(args);
  }
  async updateGovernance(
    args: Prisma.GovernanceUpdateArgs
  ): Promise<PrismaGovernance> {
    return this.prisma.governance.update(args);
  }
  async deleteGovernance(
    args: Prisma.GovernanceDeleteArgs
  ): Promise<PrismaGovernance> {
    return this.prisma.governance.delete(args);
  }
}
