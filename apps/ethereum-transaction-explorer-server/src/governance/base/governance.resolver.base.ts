/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Governance } from "./Governance";
import { GovernanceCountArgs } from "./GovernanceCountArgs";
import { GovernanceFindManyArgs } from "./GovernanceFindManyArgs";
import { GovernanceFindUniqueArgs } from "./GovernanceFindUniqueArgs";
import { DeleteGovernanceArgs } from "./DeleteGovernanceArgs";
import { GovernanceService } from "../governance.service";
@graphql.Resolver(() => Governance)
export class GovernanceResolverBase {
  constructor(protected readonly service: GovernanceService) {}

  async _governancesMeta(
    @graphql.Args() args: GovernanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Governance])
  async governances(
    @graphql.Args() args: GovernanceFindManyArgs
  ): Promise<Governance[]> {
    return this.service.governances(args);
  }

  @graphql.Query(() => Governance, { nullable: true })
  async governance(
    @graphql.Args() args: GovernanceFindUniqueArgs
  ): Promise<Governance | null> {
    const result = await this.service.governance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Governance)
  async deleteGovernance(
    @graphql.Args() args: DeleteGovernanceArgs
  ): Promise<Governance | null> {
    try {
      return await this.service.deleteGovernance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
