/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenBalanceService } from "../tokenBalance.service";
import { TokenBalanceCreateInput } from "./TokenBalanceCreateInput";
import { TokenBalance } from "./TokenBalance";
import { TokenBalanceFindManyArgs } from "./TokenBalanceFindManyArgs";
import { TokenBalanceWhereUniqueInput } from "./TokenBalanceWhereUniqueInput";
import { TokenBalanceUpdateInput } from "./TokenBalanceUpdateInput";

export class TokenBalanceControllerBase {
  constructor(protected readonly service: TokenBalanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TokenBalance })
  async createTokenBalance(
    @common.Body() data: TokenBalanceCreateInput
  ): Promise<TokenBalance> {
    return await this.service.createTokenBalance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TokenBalance] })
  @ApiNestedQuery(TokenBalanceFindManyArgs)
  async tokenBalances(@common.Req() request: Request): Promise<TokenBalance[]> {
    const args = plainToClass(TokenBalanceFindManyArgs, request.query);
    return this.service.tokenBalances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TokenBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tokenBalance(
    @common.Param() params: TokenBalanceWhereUniqueInput
  ): Promise<TokenBalance | null> {
    const result = await this.service.tokenBalance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TokenBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTokenBalance(
    @common.Param() params: TokenBalanceWhereUniqueInput,
    @common.Body() data: TokenBalanceUpdateInput
  ): Promise<TokenBalance | null> {
    try {
      return await this.service.updateTokenBalance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TokenBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTokenBalance(
    @common.Param() params: TokenBalanceWhereUniqueInput
  ): Promise<TokenBalance | null> {
    try {
      return await this.service.deleteTokenBalance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
