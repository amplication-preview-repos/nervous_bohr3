/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TokenBalance as PrismaTokenBalance } from "@prisma/client";

export class TokenBalanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TokenBalanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tokenBalance.count(args);
  }

  async tokenBalances(
    args: Prisma.TokenBalanceFindManyArgs
  ): Promise<PrismaTokenBalance[]> {
    return this.prisma.tokenBalance.findMany(args);
  }
  async tokenBalance(
    args: Prisma.TokenBalanceFindUniqueArgs
  ): Promise<PrismaTokenBalance | null> {
    return this.prisma.tokenBalance.findUnique(args);
  }
  async createTokenBalance(
    args: Prisma.TokenBalanceCreateArgs
  ): Promise<PrismaTokenBalance> {
    return this.prisma.tokenBalance.create(args);
  }
  async updateTokenBalance(
    args: Prisma.TokenBalanceUpdateArgs
  ): Promise<PrismaTokenBalance> {
    return this.prisma.tokenBalance.update(args);
  }
  async deleteTokenBalance(
    args: Prisma.TokenBalanceDeleteArgs
  ): Promise<PrismaTokenBalance> {
    return this.prisma.tokenBalance.delete(args);
  }
}
