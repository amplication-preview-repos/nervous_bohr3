/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Punishment as PrismaPunishment } from "@prisma/client";

export class PunishmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PunishmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.punishment.count(args);
  }

  async punishments(
    args: Prisma.PunishmentFindManyArgs
  ): Promise<PrismaPunishment[]> {
    return this.prisma.punishment.findMany(args);
  }
  async punishment(
    args: Prisma.PunishmentFindUniqueArgs
  ): Promise<PrismaPunishment | null> {
    return this.prisma.punishment.findUnique(args);
  }
  async createPunishment(
    args: Prisma.PunishmentCreateArgs
  ): Promise<PrismaPunishment> {
    return this.prisma.punishment.create(args);
  }
  async updatePunishment(
    args: Prisma.PunishmentUpdateArgs
  ): Promise<PrismaPunishment> {
    return this.prisma.punishment.update(args);
  }
  async deletePunishment(
    args: Prisma.PunishmentDeleteArgs
  ): Promise<PrismaPunishment> {
    return this.prisma.punishment.delete(args);
  }
}
