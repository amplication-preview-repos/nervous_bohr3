/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PunishmentService } from "../punishment.service";
import { PunishmentCreateInput } from "./PunishmentCreateInput";
import { Punishment } from "./Punishment";
import { PunishmentFindManyArgs } from "./PunishmentFindManyArgs";
import { PunishmentWhereUniqueInput } from "./PunishmentWhereUniqueInput";
import { PunishmentUpdateInput } from "./PunishmentUpdateInput";

export class PunishmentControllerBase {
  constructor(protected readonly service: PunishmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Punishment })
  async createPunishment(
    @common.Body() data: PunishmentCreateInput
  ): Promise<Punishment> {
    return await this.service.createPunishment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Punishment] })
  @ApiNestedQuery(PunishmentFindManyArgs)
  async punishments(@common.Req() request: Request): Promise<Punishment[]> {
    const args = plainToClass(PunishmentFindManyArgs, request.query);
    return this.service.punishments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Punishment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async punishment(
    @common.Param() params: PunishmentWhereUniqueInput
  ): Promise<Punishment | null> {
    const result = await this.service.punishment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Punishment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePunishment(
    @common.Param() params: PunishmentWhereUniqueInput,
    @common.Body() data: PunishmentUpdateInput
  ): Promise<Punishment | null> {
    try {
      return await this.service.updatePunishment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Punishment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePunishment(
    @common.Param() params: PunishmentWhereUniqueInput
  ): Promise<Punishment | null> {
    try {
      return await this.service.deletePunishment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
