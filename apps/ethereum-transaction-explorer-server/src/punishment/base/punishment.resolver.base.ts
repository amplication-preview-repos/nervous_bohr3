/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Punishment } from "./Punishment";
import { PunishmentCountArgs } from "./PunishmentCountArgs";
import { PunishmentFindManyArgs } from "./PunishmentFindManyArgs";
import { PunishmentFindUniqueArgs } from "./PunishmentFindUniqueArgs";
import { DeletePunishmentArgs } from "./DeletePunishmentArgs";
import { PunishmentService } from "../punishment.service";
@graphql.Resolver(() => Punishment)
export class PunishmentResolverBase {
  constructor(protected readonly service: PunishmentService) {}

  async _punishmentsMeta(
    @graphql.Args() args: PunishmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Punishment])
  async punishments(
    @graphql.Args() args: PunishmentFindManyArgs
  ): Promise<Punishment[]> {
    return this.service.punishments(args);
  }

  @graphql.Query(() => Punishment, { nullable: true })
  async punishment(
    @graphql.Args() args: PunishmentFindUniqueArgs
  ): Promise<Punishment | null> {
    const result = await this.service.punishment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Punishment)
  async deletePunishment(
    @graphql.Args() args: DeletePunishmentArgs
  ): Promise<Punishment | null> {
    try {
      return await this.service.deletePunishment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
