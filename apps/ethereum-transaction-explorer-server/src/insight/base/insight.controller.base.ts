/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InsightService } from "../insight.service";
import { InsightCreateInput } from "./InsightCreateInput";
import { Insight } from "./Insight";
import { InsightFindManyArgs } from "./InsightFindManyArgs";
import { InsightWhereUniqueInput } from "./InsightWhereUniqueInput";
import { InsightUpdateInput } from "./InsightUpdateInput";

export class InsightControllerBase {
  constructor(protected readonly service: InsightService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Insight })
  async createInsight(
    @common.Body() data: InsightCreateInput
  ): Promise<Insight> {
    return await this.service.createInsight({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Insight] })
  @ApiNestedQuery(InsightFindManyArgs)
  async insights(@common.Req() request: Request): Promise<Insight[]> {
    const args = plainToClass(InsightFindManyArgs, request.query);
    return this.service.insights({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Insight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async insight(
    @common.Param() params: InsightWhereUniqueInput
  ): Promise<Insight | null> {
    const result = await this.service.insight({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Insight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInsight(
    @common.Param() params: InsightWhereUniqueInput,
    @common.Body() data: InsightUpdateInput
  ): Promise<Insight | null> {
    try {
      return await this.service.updateInsight({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Insight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInsight(
    @common.Param() params: InsightWhereUniqueInput
  ): Promise<Insight | null> {
    try {
      return await this.service.deleteInsight({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
