/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rollup } from "./Rollup";
import { RollupCountArgs } from "./RollupCountArgs";
import { RollupFindManyArgs } from "./RollupFindManyArgs";
import { RollupFindUniqueArgs } from "./RollupFindUniqueArgs";
import { DeleteRollupArgs } from "./DeleteRollupArgs";
import { RollupService } from "../rollup.service";
@graphql.Resolver(() => Rollup)
export class RollupResolverBase {
  constructor(protected readonly service: RollupService) {}

  async _rollupsMeta(
    @graphql.Args() args: RollupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rollup])
  async rollups(@graphql.Args() args: RollupFindManyArgs): Promise<Rollup[]> {
    return this.service.rollups(args);
  }

  @graphql.Query(() => Rollup, { nullable: true })
  async rollup(
    @graphql.Args() args: RollupFindUniqueArgs
  ): Promise<Rollup | null> {
    const result = await this.service.rollup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rollup)
  async deleteRollup(
    @graphql.Args() args: DeleteRollupArgs
  ): Promise<Rollup | null> {
    try {
      return await this.service.deleteRollup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
