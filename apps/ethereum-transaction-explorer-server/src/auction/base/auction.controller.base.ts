/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuctionService } from "../auction.service";
import { AuctionCreateInput } from "./AuctionCreateInput";
import { Auction } from "./Auction";
import { AuctionFindManyArgs } from "./AuctionFindManyArgs";
import { AuctionWhereUniqueInput } from "./AuctionWhereUniqueInput";
import { AuctionUpdateInput } from "./AuctionUpdateInput";

export class AuctionControllerBase {
  constructor(protected readonly service: AuctionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Auction })
  async createAuction(
    @common.Body() data: AuctionCreateInput
  ): Promise<Auction> {
    return await this.service.createAuction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Auction] })
  @ApiNestedQuery(AuctionFindManyArgs)
  async auctions(@common.Req() request: Request): Promise<Auction[]> {
    const args = plainToClass(AuctionFindManyArgs, request.query);
    return this.service.auctions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Auction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async auction(
    @common.Param() params: AuctionWhereUniqueInput
  ): Promise<Auction | null> {
    const result = await this.service.auction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Auction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuction(
    @common.Param() params: AuctionWhereUniqueInput,
    @common.Body() data: AuctionUpdateInput
  ): Promise<Auction | null> {
    try {
      return await this.service.updateAuction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Auction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuction(
    @common.Param() params: AuctionWhereUniqueInput
  ): Promise<Auction | null> {
    try {
      return await this.service.deleteAuction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
