/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Crowdfunding as PrismaCrowdfunding } from "@prisma/client";

export class CrowdfundingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrowdfundingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crowdfunding.count(args);
  }

  async crowdfundings(
    args: Prisma.CrowdfundingFindManyArgs
  ): Promise<PrismaCrowdfunding[]> {
    return this.prisma.crowdfunding.findMany(args);
  }
  async crowdfunding(
    args: Prisma.CrowdfundingFindUniqueArgs
  ): Promise<PrismaCrowdfunding | null> {
    return this.prisma.crowdfunding.findUnique(args);
  }
  async createCrowdfunding(
    args: Prisma.CrowdfundingCreateArgs
  ): Promise<PrismaCrowdfunding> {
    return this.prisma.crowdfunding.create(args);
  }
  async updateCrowdfunding(
    args: Prisma.CrowdfundingUpdateArgs
  ): Promise<PrismaCrowdfunding> {
    return this.prisma.crowdfunding.update(args);
  }
  async deleteCrowdfunding(
    args: Prisma.CrowdfundingDeleteArgs
  ): Promise<PrismaCrowdfunding> {
    return this.prisma.crowdfunding.delete(args);
  }
}
