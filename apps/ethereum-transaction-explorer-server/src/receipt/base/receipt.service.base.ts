/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Receipt as PrismaReceipt } from "@prisma/client";

export class ReceiptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReceiptCountArgs, "select">): Promise<number> {
    return this.prisma.receipt.count(args);
  }

  async receipts(args: Prisma.ReceiptFindManyArgs): Promise<PrismaReceipt[]> {
    return this.prisma.receipt.findMany(args);
  }
  async receipt(
    args: Prisma.ReceiptFindUniqueArgs
  ): Promise<PrismaReceipt | null> {
    return this.prisma.receipt.findUnique(args);
  }
  async createReceipt(args: Prisma.ReceiptCreateArgs): Promise<PrismaReceipt> {
    return this.prisma.receipt.create(args);
  }
  async updateReceipt(args: Prisma.ReceiptUpdateArgs): Promise<PrismaReceipt> {
    return this.prisma.receipt.update(args);
  }
  async deleteReceipt(args: Prisma.ReceiptDeleteArgs): Promise<PrismaReceipt> {
    return this.prisma.receipt.delete(args);
  }
}
