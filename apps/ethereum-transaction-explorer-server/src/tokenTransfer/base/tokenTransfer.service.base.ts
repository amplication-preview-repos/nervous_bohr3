/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TokenTransfer as PrismaTokenTransfer } from "@prisma/client";

export class TokenTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TokenTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tokenTransfer.count(args);
  }

  async tokenTransfers(
    args: Prisma.TokenTransferFindManyArgs
  ): Promise<PrismaTokenTransfer[]> {
    return this.prisma.tokenTransfer.findMany(args);
  }
  async tokenTransfer(
    args: Prisma.TokenTransferFindUniqueArgs
  ): Promise<PrismaTokenTransfer | null> {
    return this.prisma.tokenTransfer.findUnique(args);
  }
  async createTokenTransfer(
    args: Prisma.TokenTransferCreateArgs
  ): Promise<PrismaTokenTransfer> {
    return this.prisma.tokenTransfer.create(args);
  }
  async updateTokenTransfer(
    args: Prisma.TokenTransferUpdateArgs
  ): Promise<PrismaTokenTransfer> {
    return this.prisma.tokenTransfer.update(args);
  }
  async deleteTokenTransfer(
    args: Prisma.TokenTransferDeleteArgs
  ): Promise<PrismaTokenTransfer> {
    return this.prisma.tokenTransfer.delete(args);
  }
}
