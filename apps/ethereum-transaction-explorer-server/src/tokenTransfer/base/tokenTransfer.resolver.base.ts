/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TokenTransfer } from "./TokenTransfer";
import { TokenTransferCountArgs } from "./TokenTransferCountArgs";
import { TokenTransferFindManyArgs } from "./TokenTransferFindManyArgs";
import { TokenTransferFindUniqueArgs } from "./TokenTransferFindUniqueArgs";
import { DeleteTokenTransferArgs } from "./DeleteTokenTransferArgs";
import { TokenTransferService } from "../tokenTransfer.service";
@graphql.Resolver(() => TokenTransfer)
export class TokenTransferResolverBase {
  constructor(protected readonly service: TokenTransferService) {}

  async _tokenTransfersMeta(
    @graphql.Args() args: TokenTransferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TokenTransfer])
  async tokenTransfers(
    @graphql.Args() args: TokenTransferFindManyArgs
  ): Promise<TokenTransfer[]> {
    return this.service.tokenTransfers(args);
  }

  @graphql.Query(() => TokenTransfer, { nullable: true })
  async tokenTransfer(
    @graphql.Args() args: TokenTransferFindUniqueArgs
  ): Promise<TokenTransfer | null> {
    const result = await this.service.tokenTransfer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TokenTransfer)
  async deleteTokenTransfer(
    @graphql.Args() args: DeleteTokenTransferArgs
  ): Promise<TokenTransfer | null> {
    try {
      return await this.service.deleteTokenTransfer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
