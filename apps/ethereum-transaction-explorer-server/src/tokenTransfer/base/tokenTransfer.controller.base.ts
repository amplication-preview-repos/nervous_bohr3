/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenTransferService } from "../tokenTransfer.service";
import { TokenTransferCreateInput } from "./TokenTransferCreateInput";
import { TokenTransfer } from "./TokenTransfer";
import { TokenTransferFindManyArgs } from "./TokenTransferFindManyArgs";
import { TokenTransferWhereUniqueInput } from "./TokenTransferWhereUniqueInput";
import { TokenTransferUpdateInput } from "./TokenTransferUpdateInput";

export class TokenTransferControllerBase {
  constructor(protected readonly service: TokenTransferService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TokenTransfer })
  async createTokenTransfer(
    @common.Body() data: TokenTransferCreateInput
  ): Promise<TokenTransfer> {
    return await this.service.createTokenTransfer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TokenTransfer] })
  @ApiNestedQuery(TokenTransferFindManyArgs)
  async tokenTransfers(
    @common.Req() request: Request
  ): Promise<TokenTransfer[]> {
    const args = plainToClass(TokenTransferFindManyArgs, request.query);
    return this.service.tokenTransfers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TokenTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tokenTransfer(
    @common.Param() params: TokenTransferWhereUniqueInput
  ): Promise<TokenTransfer | null> {
    const result = await this.service.tokenTransfer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TokenTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTokenTransfer(
    @common.Param() params: TokenTransferWhereUniqueInput,
    @common.Body() data: TokenTransferUpdateInput
  ): Promise<TokenTransfer | null> {
    try {
      return await this.service.updateTokenTransfer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TokenTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTokenTransfer(
    @common.Param() params: TokenTransferWhereUniqueInput
  ): Promise<TokenTransfer | null> {
    try {
      return await this.service.deleteTokenTransfer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
