/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TransactionFee as PrismaTransactionFee } from "@prisma/client";

export class TransactionFeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionFeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactionFee.count(args);
  }

  async transactionFees(
    args: Prisma.TransactionFeeFindManyArgs
  ): Promise<PrismaTransactionFee[]> {
    return this.prisma.transactionFee.findMany(args);
  }
  async transactionFee(
    args: Prisma.TransactionFeeFindUniqueArgs
  ): Promise<PrismaTransactionFee | null> {
    return this.prisma.transactionFee.findUnique(args);
  }
  async createTransactionFee(
    args: Prisma.TransactionFeeCreateArgs
  ): Promise<PrismaTransactionFee> {
    return this.prisma.transactionFee.create(args);
  }
  async updateTransactionFee(
    args: Prisma.TransactionFeeUpdateArgs
  ): Promise<PrismaTransactionFee> {
    return this.prisma.transactionFee.update(args);
  }
  async deleteTransactionFee(
    args: Prisma.TransactionFeeDeleteArgs
  ): Promise<PrismaTransactionFee> {
    return this.prisma.transactionFee.delete(args);
  }
}
