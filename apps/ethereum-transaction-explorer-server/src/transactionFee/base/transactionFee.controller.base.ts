/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionFeeService } from "../transactionFee.service";
import { TransactionFeeCreateInput } from "./TransactionFeeCreateInput";
import { TransactionFee } from "./TransactionFee";
import { TransactionFeeFindManyArgs } from "./TransactionFeeFindManyArgs";
import { TransactionFeeWhereUniqueInput } from "./TransactionFeeWhereUniqueInput";
import { TransactionFeeUpdateInput } from "./TransactionFeeUpdateInput";

export class TransactionFeeControllerBase {
  constructor(protected readonly service: TransactionFeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransactionFee })
  async createTransactionFee(
    @common.Body() data: TransactionFeeCreateInput
  ): Promise<TransactionFee> {
    return await this.service.createTransactionFee({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransactionFee] })
  @ApiNestedQuery(TransactionFeeFindManyArgs)
  async transactionFees(
    @common.Req() request: Request
  ): Promise<TransactionFee[]> {
    const args = plainToClass(TransactionFeeFindManyArgs, request.query);
    return this.service.transactionFees({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransactionFee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transactionFee(
    @common.Param() params: TransactionFeeWhereUniqueInput
  ): Promise<TransactionFee | null> {
    const result = await this.service.transactionFee({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransactionFee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransactionFee(
    @common.Param() params: TransactionFeeWhereUniqueInput,
    @common.Body() data: TransactionFeeUpdateInput
  ): Promise<TransactionFee | null> {
    try {
      return await this.service.updateTransactionFee({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransactionFee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransactionFee(
    @common.Param() params: TransactionFeeWhereUniqueInput
  ): Promise<TransactionFee | null> {
    try {
      return await this.service.deleteTransactionFee({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
