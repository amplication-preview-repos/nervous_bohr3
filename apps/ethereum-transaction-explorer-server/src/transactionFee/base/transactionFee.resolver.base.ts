/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TransactionFee } from "./TransactionFee";
import { TransactionFeeCountArgs } from "./TransactionFeeCountArgs";
import { TransactionFeeFindManyArgs } from "./TransactionFeeFindManyArgs";
import { TransactionFeeFindUniqueArgs } from "./TransactionFeeFindUniqueArgs";
import { DeleteTransactionFeeArgs } from "./DeleteTransactionFeeArgs";
import { TransactionFeeService } from "../transactionFee.service";
@graphql.Resolver(() => TransactionFee)
export class TransactionFeeResolverBase {
  constructor(protected readonly service: TransactionFeeService) {}

  async _transactionFeesMeta(
    @graphql.Args() args: TransactionFeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TransactionFee])
  async transactionFees(
    @graphql.Args() args: TransactionFeeFindManyArgs
  ): Promise<TransactionFee[]> {
    return this.service.transactionFees(args);
  }

  @graphql.Query(() => TransactionFee, { nullable: true })
  async transactionFee(
    @graphql.Args() args: TransactionFeeFindUniqueArgs
  ): Promise<TransactionFee | null> {
    const result = await this.service.transactionFee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TransactionFee)
  async deleteTransactionFee(
    @graphql.Args() args: DeleteTransactionFeeArgs
  ): Promise<TransactionFee | null> {
    try {
      return await this.service.deleteTransactionFee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
