/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SidechainService } from "../sidechain.service";
import { SidechainCreateInput } from "./SidechainCreateInput";
import { Sidechain } from "./Sidechain";
import { SidechainFindManyArgs } from "./SidechainFindManyArgs";
import { SidechainWhereUniqueInput } from "./SidechainWhereUniqueInput";
import { SidechainUpdateInput } from "./SidechainUpdateInput";

export class SidechainControllerBase {
  constructor(protected readonly service: SidechainService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sidechain })
  async createSidechain(
    @common.Body() data: SidechainCreateInput
  ): Promise<Sidechain> {
    return await this.service.createSidechain({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sidechain] })
  @ApiNestedQuery(SidechainFindManyArgs)
  async sidechains(@common.Req() request: Request): Promise<Sidechain[]> {
    const args = plainToClass(SidechainFindManyArgs, request.query);
    return this.service.sidechains({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sidechain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sidechain(
    @common.Param() params: SidechainWhereUniqueInput
  ): Promise<Sidechain | null> {
    const result = await this.service.sidechain({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sidechain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSidechain(
    @common.Param() params: SidechainWhereUniqueInput,
    @common.Body() data: SidechainUpdateInput
  ): Promise<Sidechain | null> {
    try {
      return await this.service.updateSidechain({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sidechain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSidechain(
    @common.Param() params: SidechainWhereUniqueInput
  ): Promise<Sidechain | null> {
    try {
      return await this.service.deleteSidechain({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
