/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sidechain as PrismaSidechain } from "@prisma/client";

export class SidechainServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SidechainCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sidechain.count(args);
  }

  async sidechains(
    args: Prisma.SidechainFindManyArgs
  ): Promise<PrismaSidechain[]> {
    return this.prisma.sidechain.findMany(args);
  }
  async sidechain(
    args: Prisma.SidechainFindUniqueArgs
  ): Promise<PrismaSidechain | null> {
    return this.prisma.sidechain.findUnique(args);
  }
  async createSidechain(
    args: Prisma.SidechainCreateArgs
  ): Promise<PrismaSidechain> {
    return this.prisma.sidechain.create(args);
  }
  async updateSidechain(
    args: Prisma.SidechainUpdateArgs
  ): Promise<PrismaSidechain> {
    return this.prisma.sidechain.update(args);
  }
  async deleteSidechain(
    args: Prisma.SidechainDeleteArgs
  ): Promise<PrismaSidechain> {
    return this.prisma.sidechain.delete(args);
  }
}
