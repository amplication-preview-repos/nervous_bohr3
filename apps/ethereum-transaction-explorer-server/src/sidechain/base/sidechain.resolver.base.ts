/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sidechain } from "./Sidechain";
import { SidechainCountArgs } from "./SidechainCountArgs";
import { SidechainFindManyArgs } from "./SidechainFindManyArgs";
import { SidechainFindUniqueArgs } from "./SidechainFindUniqueArgs";
import { DeleteSidechainArgs } from "./DeleteSidechainArgs";
import { SidechainService } from "../sidechain.service";
@graphql.Resolver(() => Sidechain)
export class SidechainResolverBase {
  constructor(protected readonly service: SidechainService) {}

  async _sidechainsMeta(
    @graphql.Args() args: SidechainCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sidechain])
  async sidechains(
    @graphql.Args() args: SidechainFindManyArgs
  ): Promise<Sidechain[]> {
    return this.service.sidechains(args);
  }

  @graphql.Query(() => Sidechain, { nullable: true })
  async sidechain(
    @graphql.Args() args: SidechainFindUniqueArgs
  ): Promise<Sidechain | null> {
    const result = await this.service.sidechain(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sidechain)
  async deleteSidechain(
    @graphql.Args() args: DeleteSidechainArgs
  ): Promise<Sidechain | null> {
    try {
      return await this.service.deleteSidechain(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
