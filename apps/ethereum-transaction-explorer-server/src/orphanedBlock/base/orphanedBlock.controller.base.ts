/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrphanedBlockService } from "../orphanedBlock.service";
import { OrphanedBlockCreateInput } from "./OrphanedBlockCreateInput";
import { OrphanedBlock } from "./OrphanedBlock";
import { OrphanedBlockFindManyArgs } from "./OrphanedBlockFindManyArgs";
import { OrphanedBlockWhereUniqueInput } from "./OrphanedBlockWhereUniqueInput";
import { OrphanedBlockUpdateInput } from "./OrphanedBlockUpdateInput";

export class OrphanedBlockControllerBase {
  constructor(protected readonly service: OrphanedBlockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrphanedBlock })
  async createOrphanedBlock(
    @common.Body() data: OrphanedBlockCreateInput
  ): Promise<OrphanedBlock> {
    return await this.service.createOrphanedBlock({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrphanedBlock] })
  @ApiNestedQuery(OrphanedBlockFindManyArgs)
  async orphanedBlocks(
    @common.Req() request: Request
  ): Promise<OrphanedBlock[]> {
    const args = plainToClass(OrphanedBlockFindManyArgs, request.query);
    return this.service.orphanedBlocks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrphanedBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orphanedBlock(
    @common.Param() params: OrphanedBlockWhereUniqueInput
  ): Promise<OrphanedBlock | null> {
    const result = await this.service.orphanedBlock({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrphanedBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrphanedBlock(
    @common.Param() params: OrphanedBlockWhereUniqueInput,
    @common.Body() data: OrphanedBlockUpdateInput
  ): Promise<OrphanedBlock | null> {
    try {
      return await this.service.updateOrphanedBlock({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrphanedBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrphanedBlock(
    @common.Param() params: OrphanedBlockWhereUniqueInput
  ): Promise<OrphanedBlock | null> {
    try {
      return await this.service.deleteOrphanedBlock({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
