/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OrphanedBlock as PrismaOrphanedBlock } from "@prisma/client";

export class OrphanedBlockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrphanedBlockCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orphanedBlock.count(args);
  }

  async orphanedBlocks(
    args: Prisma.OrphanedBlockFindManyArgs
  ): Promise<PrismaOrphanedBlock[]> {
    return this.prisma.orphanedBlock.findMany(args);
  }
  async orphanedBlock(
    args: Prisma.OrphanedBlockFindUniqueArgs
  ): Promise<PrismaOrphanedBlock | null> {
    return this.prisma.orphanedBlock.findUnique(args);
  }
  async createOrphanedBlock(
    args: Prisma.OrphanedBlockCreateArgs
  ): Promise<PrismaOrphanedBlock> {
    return this.prisma.orphanedBlock.create(args);
  }
  async updateOrphanedBlock(
    args: Prisma.OrphanedBlockUpdateArgs
  ): Promise<PrismaOrphanedBlock> {
    return this.prisma.orphanedBlock.update(args);
  }
  async deleteOrphanedBlock(
    args: Prisma.OrphanedBlockDeleteArgs
  ): Promise<PrismaOrphanedBlock> {
    return this.prisma.orphanedBlock.delete(args);
  }
}
