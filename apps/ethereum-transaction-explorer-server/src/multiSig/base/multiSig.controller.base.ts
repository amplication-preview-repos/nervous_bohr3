/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MultiSigService } from "../multiSig.service";
import { MultiSigCreateInput } from "./MultiSigCreateInput";
import { MultiSig } from "./MultiSig";
import { MultiSigFindManyArgs } from "./MultiSigFindManyArgs";
import { MultiSigWhereUniqueInput } from "./MultiSigWhereUniqueInput";
import { MultiSigUpdateInput } from "./MultiSigUpdateInput";

export class MultiSigControllerBase {
  constructor(protected readonly service: MultiSigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MultiSig })
  async createMultiSig(
    @common.Body() data: MultiSigCreateInput
  ): Promise<MultiSig> {
    return await this.service.createMultiSig({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MultiSig] })
  @ApiNestedQuery(MultiSigFindManyArgs)
  async multiSigs(@common.Req() request: Request): Promise<MultiSig[]> {
    const args = plainToClass(MultiSigFindManyArgs, request.query);
    return this.service.multiSigs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MultiSig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async multiSig(
    @common.Param() params: MultiSigWhereUniqueInput
  ): Promise<MultiSig | null> {
    const result = await this.service.multiSig({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MultiSig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMultiSig(
    @common.Param() params: MultiSigWhereUniqueInput,
    @common.Body() data: MultiSigUpdateInput
  ): Promise<MultiSig | null> {
    try {
      return await this.service.updateMultiSig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MultiSig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMultiSig(
    @common.Param() params: MultiSigWhereUniqueInput
  ): Promise<MultiSig | null> {
    try {
      return await this.service.deleteMultiSig({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
