/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MultiSig as PrismaMultiSig } from "@prisma/client";

export class MultiSigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MultiSigCountArgs, "select">): Promise<number> {
    return this.prisma.multiSig.count(args);
  }

  async multiSigs(
    args: Prisma.MultiSigFindManyArgs
  ): Promise<PrismaMultiSig[]> {
    return this.prisma.multiSig.findMany(args);
  }
  async multiSig(
    args: Prisma.MultiSigFindUniqueArgs
  ): Promise<PrismaMultiSig | null> {
    return this.prisma.multiSig.findUnique(args);
  }
  async createMultiSig(
    args: Prisma.MultiSigCreateArgs
  ): Promise<PrismaMultiSig> {
    return this.prisma.multiSig.create(args);
  }
  async updateMultiSig(
    args: Prisma.MultiSigUpdateArgs
  ): Promise<PrismaMultiSig> {
    return this.prisma.multiSig.update(args);
  }
  async deleteMultiSig(
    args: Prisma.MultiSigDeleteArgs
  ): Promise<PrismaMultiSig> {
    return this.prisma.multiSig.delete(args);
  }
}
