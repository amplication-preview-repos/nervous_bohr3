/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionAuditService } from "../transactionAudit.service";
import { TransactionAuditCreateInput } from "./TransactionAuditCreateInput";
import { TransactionAudit } from "./TransactionAudit";
import { TransactionAuditFindManyArgs } from "./TransactionAuditFindManyArgs";
import { TransactionAuditWhereUniqueInput } from "./TransactionAuditWhereUniqueInput";
import { TransactionAuditUpdateInput } from "./TransactionAuditUpdateInput";

export class TransactionAuditControllerBase {
  constructor(protected readonly service: TransactionAuditService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransactionAudit })
  async createTransactionAudit(
    @common.Body() data: TransactionAuditCreateInput
  ): Promise<TransactionAudit> {
    return await this.service.createTransactionAudit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransactionAudit] })
  @ApiNestedQuery(TransactionAuditFindManyArgs)
  async transactionAudits(
    @common.Req() request: Request
  ): Promise<TransactionAudit[]> {
    const args = plainToClass(TransactionAuditFindManyArgs, request.query);
    return this.service.transactionAudits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransactionAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transactionAudit(
    @common.Param() params: TransactionAuditWhereUniqueInput
  ): Promise<TransactionAudit | null> {
    const result = await this.service.transactionAudit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransactionAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransactionAudit(
    @common.Param() params: TransactionAuditWhereUniqueInput,
    @common.Body() data: TransactionAuditUpdateInput
  ): Promise<TransactionAudit | null> {
    try {
      return await this.service.updateTransactionAudit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransactionAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransactionAudit(
    @common.Param() params: TransactionAuditWhereUniqueInput
  ): Promise<TransactionAudit | null> {
    try {
      return await this.service.deleteTransactionAudit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
