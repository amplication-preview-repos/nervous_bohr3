/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TransactionAudit as PrismaTransactionAudit,
} from "@prisma/client";

export class TransactionAuditServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionAuditCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactionAudit.count(args);
  }

  async transactionAudits(
    args: Prisma.TransactionAuditFindManyArgs
  ): Promise<PrismaTransactionAudit[]> {
    return this.prisma.transactionAudit.findMany(args);
  }
  async transactionAudit(
    args: Prisma.TransactionAuditFindUniqueArgs
  ): Promise<PrismaTransactionAudit | null> {
    return this.prisma.transactionAudit.findUnique(args);
  }
  async createTransactionAudit(
    args: Prisma.TransactionAuditCreateArgs
  ): Promise<PrismaTransactionAudit> {
    return this.prisma.transactionAudit.create(args);
  }
  async updateTransactionAudit(
    args: Prisma.TransactionAuditUpdateArgs
  ): Promise<PrismaTransactionAudit> {
    return this.prisma.transactionAudit.update(args);
  }
  async deleteTransactionAudit(
    args: Prisma.TransactionAuditDeleteArgs
  ): Promise<PrismaTransactionAudit> {
    return this.prisma.transactionAudit.delete(args);
  }
}
