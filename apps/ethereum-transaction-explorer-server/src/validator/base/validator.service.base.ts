/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Validator as PrismaValidator } from "@prisma/client";

export class ValidatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ValidatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.validator.count(args);
  }

  async validators(
    args: Prisma.ValidatorFindManyArgs
  ): Promise<PrismaValidator[]> {
    return this.prisma.validator.findMany(args);
  }
  async validator(
    args: Prisma.ValidatorFindUniqueArgs
  ): Promise<PrismaValidator | null> {
    return this.prisma.validator.findUnique(args);
  }
  async createValidator(
    args: Prisma.ValidatorCreateArgs
  ): Promise<PrismaValidator> {
    return this.prisma.validator.create(args);
  }
  async updateValidator(
    args: Prisma.ValidatorUpdateArgs
  ): Promise<PrismaValidator> {
    return this.prisma.validator.update(args);
  }
  async deleteValidator(
    args: Prisma.ValidatorDeleteArgs
  ): Promise<PrismaValidator> {
    return this.prisma.validator.delete(args);
  }
}
