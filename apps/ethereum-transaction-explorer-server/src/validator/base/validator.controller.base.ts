/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ValidatorService } from "../validator.service";
import { ValidatorCreateInput } from "./ValidatorCreateInput";
import { Validator } from "./Validator";
import { ValidatorFindManyArgs } from "./ValidatorFindManyArgs";
import { ValidatorWhereUniqueInput } from "./ValidatorWhereUniqueInput";
import { ValidatorUpdateInput } from "./ValidatorUpdateInput";

export class ValidatorControllerBase {
  constructor(protected readonly service: ValidatorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Validator })
  async createValidator(
    @common.Body() data: ValidatorCreateInput
  ): Promise<Validator> {
    return await this.service.createValidator({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Validator] })
  @ApiNestedQuery(ValidatorFindManyArgs)
  async validators(@common.Req() request: Request): Promise<Validator[]> {
    const args = plainToClass(ValidatorFindManyArgs, request.query);
    return this.service.validators({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Validator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async validator(
    @common.Param() params: ValidatorWhereUniqueInput
  ): Promise<Validator | null> {
    const result = await this.service.validator({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Validator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateValidator(
    @common.Param() params: ValidatorWhereUniqueInput,
    @common.Body() data: ValidatorUpdateInput
  ): Promise<Validator | null> {
    try {
      return await this.service.updateValidator({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Validator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteValidator(
    @common.Param() params: ValidatorWhereUniqueInput
  ): Promise<Validator | null> {
    try {
      return await this.service.deleteValidator({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
