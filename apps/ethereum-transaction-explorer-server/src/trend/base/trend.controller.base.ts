/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrendService } from "../trend.service";
import { TrendCreateInput } from "./TrendCreateInput";
import { Trend } from "./Trend";
import { TrendFindManyArgs } from "./TrendFindManyArgs";
import { TrendWhereUniqueInput } from "./TrendWhereUniqueInput";
import { TrendUpdateInput } from "./TrendUpdateInput";

export class TrendControllerBase {
  constructor(protected readonly service: TrendService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Trend })
  async createTrend(@common.Body() data: TrendCreateInput): Promise<Trend> {
    return await this.service.createTrend({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Trend] })
  @ApiNestedQuery(TrendFindManyArgs)
  async trends(@common.Req() request: Request): Promise<Trend[]> {
    const args = plainToClass(TrendFindManyArgs, request.query);
    return this.service.trends({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trend(
    @common.Param() params: TrendWhereUniqueInput
  ): Promise<Trend | null> {
    const result = await this.service.trend({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrend(
    @common.Param() params: TrendWhereUniqueInput,
    @common.Body() data: TrendUpdateInput
  ): Promise<Trend | null> {
    try {
      return await this.service.updateTrend({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrend(
    @common.Param() params: TrendWhereUniqueInput
  ): Promise<Trend | null> {
    try {
      return await this.service.deleteTrend({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
