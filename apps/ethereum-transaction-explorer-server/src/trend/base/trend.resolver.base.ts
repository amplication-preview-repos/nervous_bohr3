/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Trend } from "./Trend";
import { TrendCountArgs } from "./TrendCountArgs";
import { TrendFindManyArgs } from "./TrendFindManyArgs";
import { TrendFindUniqueArgs } from "./TrendFindUniqueArgs";
import { DeleteTrendArgs } from "./DeleteTrendArgs";
import { TrendService } from "../trend.service";
@graphql.Resolver(() => Trend)
export class TrendResolverBase {
  constructor(protected readonly service: TrendService) {}

  async _trendsMeta(
    @graphql.Args() args: TrendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Trend])
  async trends(@graphql.Args() args: TrendFindManyArgs): Promise<Trend[]> {
    return this.service.trends(args);
  }

  @graphql.Query(() => Trend, { nullable: true })
  async trend(
    @graphql.Args() args: TrendFindUniqueArgs
  ): Promise<Trend | null> {
    const result = await this.service.trend(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Trend)
  async deleteTrend(
    @graphql.Args() args: DeleteTrendArgs
  ): Promise<Trend | null> {
    try {
      return await this.service.deleteTrend(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
