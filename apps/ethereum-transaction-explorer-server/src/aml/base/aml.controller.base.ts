/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AmlService } from "../aml.service";
import { AmlCreateInput } from "./AmlCreateInput";
import { Aml } from "./Aml";
import { AmlFindManyArgs } from "./AmlFindManyArgs";
import { AmlWhereUniqueInput } from "./AmlWhereUniqueInput";
import { AmlUpdateInput } from "./AmlUpdateInput";

export class AmlControllerBase {
  constructor(protected readonly service: AmlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aml })
  async createAml(@common.Body() data: AmlCreateInput): Promise<Aml> {
    return await this.service.createAml({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aml] })
  @ApiNestedQuery(AmlFindManyArgs)
  async amls(@common.Req() request: Request): Promise<Aml[]> {
    const args = plainToClass(AmlFindManyArgs, request.query);
    return this.service.amls({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aml(@common.Param() params: AmlWhereUniqueInput): Promise<Aml | null> {
    const result = await this.service.aml({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAml(
    @common.Param() params: AmlWhereUniqueInput,
    @common.Body() data: AmlUpdateInput
  ): Promise<Aml | null> {
    try {
      return await this.service.updateAml({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAml(
    @common.Param() params: AmlWhereUniqueInput
  ): Promise<Aml | null> {
    try {
      return await this.service.deleteAml({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
