/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Aml } from "./Aml";
import { AmlCountArgs } from "./AmlCountArgs";
import { AmlFindManyArgs } from "./AmlFindManyArgs";
import { AmlFindUniqueArgs } from "./AmlFindUniqueArgs";
import { DeleteAmlArgs } from "./DeleteAmlArgs";
import { AmlService } from "../aml.service";
@graphql.Resolver(() => Aml)
export class AmlResolverBase {
  constructor(protected readonly service: AmlService) {}

  async _amlsMeta(
    @graphql.Args() args: AmlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Aml])
  async amls(@graphql.Args() args: AmlFindManyArgs): Promise<Aml[]> {
    return this.service.amls(args);
  }

  @graphql.Query(() => Aml, { nullable: true })
  async aml(@graphql.Args() args: AmlFindUniqueArgs): Promise<Aml | null> {
    const result = await this.service.aml(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Aml)
  async deleteAml(@graphql.Args() args: DeleteAmlArgs): Promise<Aml | null> {
    try {
      return await this.service.deleteAml(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
