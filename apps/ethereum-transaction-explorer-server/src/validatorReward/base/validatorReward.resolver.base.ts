/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ValidatorReward } from "./ValidatorReward";
import { ValidatorRewardCountArgs } from "./ValidatorRewardCountArgs";
import { ValidatorRewardFindManyArgs } from "./ValidatorRewardFindManyArgs";
import { ValidatorRewardFindUniqueArgs } from "./ValidatorRewardFindUniqueArgs";
import { DeleteValidatorRewardArgs } from "./DeleteValidatorRewardArgs";
import { ValidatorRewardService } from "../validatorReward.service";
@graphql.Resolver(() => ValidatorReward)
export class ValidatorRewardResolverBase {
  constructor(protected readonly service: ValidatorRewardService) {}

  async _validatorRewardsMeta(
    @graphql.Args() args: ValidatorRewardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ValidatorReward])
  async validatorRewards(
    @graphql.Args() args: ValidatorRewardFindManyArgs
  ): Promise<ValidatorReward[]> {
    return this.service.validatorRewards(args);
  }

  @graphql.Query(() => ValidatorReward, { nullable: true })
  async validatorReward(
    @graphql.Args() args: ValidatorRewardFindUniqueArgs
  ): Promise<ValidatorReward | null> {
    const result = await this.service.validatorReward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ValidatorReward)
  async deleteValidatorReward(
    @graphql.Args() args: DeleteValidatorRewardArgs
  ): Promise<ValidatorReward | null> {
    try {
      return await this.service.deleteValidatorReward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
