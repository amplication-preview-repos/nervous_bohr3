/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ValidatorReward as PrismaValidatorReward,
} from "@prisma/client";

export class ValidatorRewardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ValidatorRewardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.validatorReward.count(args);
  }

  async validatorRewards(
    args: Prisma.ValidatorRewardFindManyArgs
  ): Promise<PrismaValidatorReward[]> {
    return this.prisma.validatorReward.findMany(args);
  }
  async validatorReward(
    args: Prisma.ValidatorRewardFindUniqueArgs
  ): Promise<PrismaValidatorReward | null> {
    return this.prisma.validatorReward.findUnique(args);
  }
  async createValidatorReward(
    args: Prisma.ValidatorRewardCreateArgs
  ): Promise<PrismaValidatorReward> {
    return this.prisma.validatorReward.create(args);
  }
  async updateValidatorReward(
    args: Prisma.ValidatorRewardUpdateArgs
  ): Promise<PrismaValidatorReward> {
    return this.prisma.validatorReward.update(args);
  }
  async deleteValidatorReward(
    args: Prisma.ValidatorRewardDeleteArgs
  ): Promise<PrismaValidatorReward> {
    return this.prisma.validatorReward.delete(args);
  }
}
