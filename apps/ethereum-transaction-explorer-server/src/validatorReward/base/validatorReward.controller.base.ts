/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ValidatorRewardService } from "../validatorReward.service";
import { ValidatorRewardCreateInput } from "./ValidatorRewardCreateInput";
import { ValidatorReward } from "./ValidatorReward";
import { ValidatorRewardFindManyArgs } from "./ValidatorRewardFindManyArgs";
import { ValidatorRewardWhereUniqueInput } from "./ValidatorRewardWhereUniqueInput";
import { ValidatorRewardUpdateInput } from "./ValidatorRewardUpdateInput";

export class ValidatorRewardControllerBase {
  constructor(protected readonly service: ValidatorRewardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ValidatorReward })
  async createValidatorReward(
    @common.Body() data: ValidatorRewardCreateInput
  ): Promise<ValidatorReward> {
    return await this.service.createValidatorReward({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ValidatorReward] })
  @ApiNestedQuery(ValidatorRewardFindManyArgs)
  async validatorRewards(
    @common.Req() request: Request
  ): Promise<ValidatorReward[]> {
    const args = plainToClass(ValidatorRewardFindManyArgs, request.query);
    return this.service.validatorRewards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ValidatorReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async validatorReward(
    @common.Param() params: ValidatorRewardWhereUniqueInput
  ): Promise<ValidatorReward | null> {
    const result = await this.service.validatorReward({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ValidatorReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateValidatorReward(
    @common.Param() params: ValidatorRewardWhereUniqueInput,
    @common.Body() data: ValidatorRewardUpdateInput
  ): Promise<ValidatorReward | null> {
    try {
      return await this.service.updateValidatorReward({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ValidatorReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteValidatorReward(
    @common.Param() params: ValidatorRewardWhereUniqueInput
  ): Promise<ValidatorReward | null> {
    try {
      return await this.service.deleteValidatorReward({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
