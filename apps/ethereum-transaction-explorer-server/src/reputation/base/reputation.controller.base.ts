/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReputationService } from "../reputation.service";
import { ReputationCreateInput } from "./ReputationCreateInput";
import { Reputation } from "./Reputation";
import { ReputationFindManyArgs } from "./ReputationFindManyArgs";
import { ReputationWhereUniqueInput } from "./ReputationWhereUniqueInput";
import { ReputationUpdateInput } from "./ReputationUpdateInput";

export class ReputationControllerBase {
  constructor(protected readonly service: ReputationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reputation })
  async createReputation(
    @common.Body() data: ReputationCreateInput
  ): Promise<Reputation> {
    return await this.service.createReputation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reputation] })
  @ApiNestedQuery(ReputationFindManyArgs)
  async reputations(@common.Req() request: Request): Promise<Reputation[]> {
    const args = plainToClass(ReputationFindManyArgs, request.query);
    return this.service.reputations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reputation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reputation(
    @common.Param() params: ReputationWhereUniqueInput
  ): Promise<Reputation | null> {
    const result = await this.service.reputation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reputation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReputation(
    @common.Param() params: ReputationWhereUniqueInput,
    @common.Body() data: ReputationUpdateInput
  ): Promise<Reputation | null> {
    try {
      return await this.service.updateReputation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reputation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReputation(
    @common.Param() params: ReputationWhereUniqueInput
  ): Promise<Reputation | null> {
    try {
      return await this.service.deleteReputation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
