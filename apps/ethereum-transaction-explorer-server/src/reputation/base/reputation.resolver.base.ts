/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reputation } from "./Reputation";
import { ReputationCountArgs } from "./ReputationCountArgs";
import { ReputationFindManyArgs } from "./ReputationFindManyArgs";
import { ReputationFindUniqueArgs } from "./ReputationFindUniqueArgs";
import { DeleteReputationArgs } from "./DeleteReputationArgs";
import { ReputationService } from "../reputation.service";
@graphql.Resolver(() => Reputation)
export class ReputationResolverBase {
  constructor(protected readonly service: ReputationService) {}

  async _reputationsMeta(
    @graphql.Args() args: ReputationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reputation])
  async reputations(
    @graphql.Args() args: ReputationFindManyArgs
  ): Promise<Reputation[]> {
    return this.service.reputations(args);
  }

  @graphql.Query(() => Reputation, { nullable: true })
  async reputation(
    @graphql.Args() args: ReputationFindUniqueArgs
  ): Promise<Reputation | null> {
    const result = await this.service.reputation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reputation)
  async deleteReputation(
    @graphql.Args() args: DeleteReputationArgs
  ): Promise<Reputation | null> {
    try {
      return await this.service.deleteReputation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
