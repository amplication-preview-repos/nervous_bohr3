/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SecurityIncidentService } from "../securityIncident.service";
import { SecurityIncidentCreateInput } from "./SecurityIncidentCreateInput";
import { SecurityIncident } from "./SecurityIncident";
import { SecurityIncidentFindManyArgs } from "./SecurityIncidentFindManyArgs";
import { SecurityIncidentWhereUniqueInput } from "./SecurityIncidentWhereUniqueInput";
import { SecurityIncidentUpdateInput } from "./SecurityIncidentUpdateInput";

export class SecurityIncidentControllerBase {
  constructor(protected readonly service: SecurityIncidentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SecurityIncident })
  async createSecurityIncident(
    @common.Body() data: SecurityIncidentCreateInput
  ): Promise<SecurityIncident> {
    return await this.service.createSecurityIncident({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SecurityIncident] })
  @ApiNestedQuery(SecurityIncidentFindManyArgs)
  async securityIncidents(
    @common.Req() request: Request
  ): Promise<SecurityIncident[]> {
    const args = plainToClass(SecurityIncidentFindManyArgs, request.query);
    return this.service.securityIncidents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SecurityIncident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async securityIncident(
    @common.Param() params: SecurityIncidentWhereUniqueInput
  ): Promise<SecurityIncident | null> {
    const result = await this.service.securityIncident({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SecurityIncident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSecurityIncident(
    @common.Param() params: SecurityIncidentWhereUniqueInput,
    @common.Body() data: SecurityIncidentUpdateInput
  ): Promise<SecurityIncident | null> {
    try {
      return await this.service.updateSecurityIncident({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SecurityIncident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSecurityIncident(
    @common.Param() params: SecurityIncidentWhereUniqueInput
  ): Promise<SecurityIncident | null> {
    try {
      return await this.service.deleteSecurityIncident({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
