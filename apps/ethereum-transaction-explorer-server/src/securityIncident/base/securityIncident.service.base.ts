/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SecurityIncident as PrismaSecurityIncident,
} from "@prisma/client";

export class SecurityIncidentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SecurityIncidentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.securityIncident.count(args);
  }

  async securityIncidents(
    args: Prisma.SecurityIncidentFindManyArgs
  ): Promise<PrismaSecurityIncident[]> {
    return this.prisma.securityIncident.findMany(args);
  }
  async securityIncident(
    args: Prisma.SecurityIncidentFindUniqueArgs
  ): Promise<PrismaSecurityIncident | null> {
    return this.prisma.securityIncident.findUnique(args);
  }
  async createSecurityIncident(
    args: Prisma.SecurityIncidentCreateArgs
  ): Promise<PrismaSecurityIncident> {
    return this.prisma.securityIncident.create(args);
  }
  async updateSecurityIncident(
    args: Prisma.SecurityIncidentUpdateArgs
  ): Promise<PrismaSecurityIncident> {
    return this.prisma.securityIncident.update(args);
  }
  async deleteSecurityIncident(
    args: Prisma.SecurityIncidentDeleteArgs
  ): Promise<PrismaSecurityIncident> {
    return this.prisma.securityIncident.delete(args);
  }
}
