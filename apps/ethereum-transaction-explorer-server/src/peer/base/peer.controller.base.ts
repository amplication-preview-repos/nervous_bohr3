/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PeerService } from "../peer.service";
import { PeerCreateInput } from "./PeerCreateInput";
import { Peer } from "./Peer";
import { PeerFindManyArgs } from "./PeerFindManyArgs";
import { PeerWhereUniqueInput } from "./PeerWhereUniqueInput";
import { PeerUpdateInput } from "./PeerUpdateInput";

export class PeerControllerBase {
  constructor(protected readonly service: PeerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Peer })
  async createPeer(@common.Body() data: PeerCreateInput): Promise<Peer> {
    return await this.service.createPeer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Peer] })
  @ApiNestedQuery(PeerFindManyArgs)
  async peers(@common.Req() request: Request): Promise<Peer[]> {
    const args = plainToClass(PeerFindManyArgs, request.query);
    return this.service.peers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Peer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async peer(
    @common.Param() params: PeerWhereUniqueInput
  ): Promise<Peer | null> {
    const result = await this.service.peer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Peer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePeer(
    @common.Param() params: PeerWhereUniqueInput,
    @common.Body() data: PeerUpdateInput
  ): Promise<Peer | null> {
    try {
      return await this.service.updatePeer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Peer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePeer(
    @common.Param() params: PeerWhereUniqueInput
  ): Promise<Peer | null> {
    try {
      return await this.service.deletePeer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
