/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Peer as PrismaPeer } from "@prisma/client";

export class PeerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PeerCountArgs, "select">): Promise<number> {
    return this.prisma.peer.count(args);
  }

  async peers(args: Prisma.PeerFindManyArgs): Promise<PrismaPeer[]> {
    return this.prisma.peer.findMany(args);
  }
  async peer(args: Prisma.PeerFindUniqueArgs): Promise<PrismaPeer | null> {
    return this.prisma.peer.findUnique(args);
  }
  async createPeer(args: Prisma.PeerCreateArgs): Promise<PrismaPeer> {
    return this.prisma.peer.create(args);
  }
  async updatePeer(args: Prisma.PeerUpdateArgs): Promise<PrismaPeer> {
    return this.prisma.peer.update(args);
  }
  async deletePeer(args: Prisma.PeerDeleteArgs): Promise<PrismaPeer> {
    return this.prisma.peer.delete(args);
  }
}
