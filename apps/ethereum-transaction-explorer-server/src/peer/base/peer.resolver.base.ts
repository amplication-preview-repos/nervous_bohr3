/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Peer } from "./Peer";
import { PeerCountArgs } from "./PeerCountArgs";
import { PeerFindManyArgs } from "./PeerFindManyArgs";
import { PeerFindUniqueArgs } from "./PeerFindUniqueArgs";
import { DeletePeerArgs } from "./DeletePeerArgs";
import { PeerService } from "../peer.service";
@graphql.Resolver(() => Peer)
export class PeerResolverBase {
  constructor(protected readonly service: PeerService) {}

  async _peersMeta(
    @graphql.Args() args: PeerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Peer])
  async peers(@graphql.Args() args: PeerFindManyArgs): Promise<Peer[]> {
    return this.service.peers(args);
  }

  @graphql.Query(() => Peer, { nullable: true })
  async peer(@graphql.Args() args: PeerFindUniqueArgs): Promise<Peer | null> {
    const result = await this.service.peer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Peer)
  async deletePeer(@graphql.Args() args: DeletePeerArgs): Promise<Peer | null> {
    try {
      return await this.service.deletePeer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
