/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MinerService } from "../miner.service";
import { MinerCreateInput } from "./MinerCreateInput";
import { Miner } from "./Miner";
import { MinerFindManyArgs } from "./MinerFindManyArgs";
import { MinerWhereUniqueInput } from "./MinerWhereUniqueInput";
import { MinerUpdateInput } from "./MinerUpdateInput";

export class MinerControllerBase {
  constructor(protected readonly service: MinerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Miner })
  async createMiner(@common.Body() data: MinerCreateInput): Promise<Miner> {
    return await this.service.createMiner({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Miner] })
  @ApiNestedQuery(MinerFindManyArgs)
  async miners(@common.Req() request: Request): Promise<Miner[]> {
    const args = plainToClass(MinerFindManyArgs, request.query);
    return this.service.miners({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Miner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async miner(
    @common.Param() params: MinerWhereUniqueInput
  ): Promise<Miner | null> {
    const result = await this.service.miner({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Miner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMiner(
    @common.Param() params: MinerWhereUniqueInput,
    @common.Body() data: MinerUpdateInput
  ): Promise<Miner | null> {
    try {
      return await this.service.updateMiner({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Miner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMiner(
    @common.Param() params: MinerWhereUniqueInput
  ): Promise<Miner | null> {
    try {
      return await this.service.deleteMiner({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
