/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrossChainTransactionService } from "../crossChainTransaction.service";
import { CrossChainTransactionCreateInput } from "./CrossChainTransactionCreateInput";
import { CrossChainTransaction } from "./CrossChainTransaction";
import { CrossChainTransactionFindManyArgs } from "./CrossChainTransactionFindManyArgs";
import { CrossChainTransactionWhereUniqueInput } from "./CrossChainTransactionWhereUniqueInput";
import { CrossChainTransactionUpdateInput } from "./CrossChainTransactionUpdateInput";

export class CrossChainTransactionControllerBase {
  constructor(protected readonly service: CrossChainTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrossChainTransaction })
  async createCrossChainTransaction(
    @common.Body() data: CrossChainTransactionCreateInput
  ): Promise<CrossChainTransaction> {
    return await this.service.createCrossChainTransaction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrossChainTransaction] })
  @ApiNestedQuery(CrossChainTransactionFindManyArgs)
  async crossChainTransactions(
    @common.Req() request: Request
  ): Promise<CrossChainTransaction[]> {
    const args = plainToClass(CrossChainTransactionFindManyArgs, request.query);
    return this.service.crossChainTransactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrossChainTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crossChainTransaction(
    @common.Param() params: CrossChainTransactionWhereUniqueInput
  ): Promise<CrossChainTransaction | null> {
    const result = await this.service.crossChainTransaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrossChainTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrossChainTransaction(
    @common.Param() params: CrossChainTransactionWhereUniqueInput,
    @common.Body() data: CrossChainTransactionUpdateInput
  ): Promise<CrossChainTransaction | null> {
    try {
      return await this.service.updateCrossChainTransaction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrossChainTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrossChainTransaction(
    @common.Param() params: CrossChainTransactionWhereUniqueInput
  ): Promise<CrossChainTransaction | null> {
    try {
      return await this.service.deleteCrossChainTransaction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
