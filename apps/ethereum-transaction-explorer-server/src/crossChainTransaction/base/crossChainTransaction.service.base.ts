/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CrossChainTransaction as PrismaCrossChainTransaction,
} from "@prisma/client";

export class CrossChainTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrossChainTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crossChainTransaction.count(args);
  }

  async crossChainTransactions(
    args: Prisma.CrossChainTransactionFindManyArgs
  ): Promise<PrismaCrossChainTransaction[]> {
    return this.prisma.crossChainTransaction.findMany(args);
  }
  async crossChainTransaction(
    args: Prisma.CrossChainTransactionFindUniqueArgs
  ): Promise<PrismaCrossChainTransaction | null> {
    return this.prisma.crossChainTransaction.findUnique(args);
  }
  async createCrossChainTransaction(
    args: Prisma.CrossChainTransactionCreateArgs
  ): Promise<PrismaCrossChainTransaction> {
    return this.prisma.crossChainTransaction.create(args);
  }
  async updateCrossChainTransaction(
    args: Prisma.CrossChainTransactionUpdateArgs
  ): Promise<PrismaCrossChainTransaction> {
    return this.prisma.crossChainTransaction.update(args);
  }
  async deleteCrossChainTransaction(
    args: Prisma.CrossChainTransactionDeleteArgs
  ): Promise<PrismaCrossChainTransaction> {
    return this.prisma.crossChainTransaction.delete(args);
  }
}
