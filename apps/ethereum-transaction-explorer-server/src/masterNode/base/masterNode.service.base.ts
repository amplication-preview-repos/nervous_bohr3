/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MasterNode as PrismaMasterNode } from "@prisma/client";

export class MasterNodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MasterNodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.masterNode.count(args);
  }

  async masterNodes(
    args: Prisma.MasterNodeFindManyArgs
  ): Promise<PrismaMasterNode[]> {
    return this.prisma.masterNode.findMany(args);
  }
  async masterNode(
    args: Prisma.MasterNodeFindUniqueArgs
  ): Promise<PrismaMasterNode | null> {
    return this.prisma.masterNode.findUnique(args);
  }
  async createMasterNode(
    args: Prisma.MasterNodeCreateArgs
  ): Promise<PrismaMasterNode> {
    return this.prisma.masterNode.create(args);
  }
  async updateMasterNode(
    args: Prisma.MasterNodeUpdateArgs
  ): Promise<PrismaMasterNode> {
    return this.prisma.masterNode.update(args);
  }
  async deleteMasterNode(
    args: Prisma.MasterNodeDeleteArgs
  ): Promise<PrismaMasterNode> {
    return this.prisma.masterNode.delete(args);
  }
}
