/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MasterNodeService } from "../masterNode.service";
import { MasterNodeCreateInput } from "./MasterNodeCreateInput";
import { MasterNode } from "./MasterNode";
import { MasterNodeFindManyArgs } from "./MasterNodeFindManyArgs";
import { MasterNodeWhereUniqueInput } from "./MasterNodeWhereUniqueInput";
import { MasterNodeUpdateInput } from "./MasterNodeUpdateInput";

export class MasterNodeControllerBase {
  constructor(protected readonly service: MasterNodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MasterNode })
  async createMasterNode(
    @common.Body() data: MasterNodeCreateInput
  ): Promise<MasterNode> {
    return await this.service.createMasterNode({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MasterNode] })
  @ApiNestedQuery(MasterNodeFindManyArgs)
  async masterNodes(@common.Req() request: Request): Promise<MasterNode[]> {
    const args = plainToClass(MasterNodeFindManyArgs, request.query);
    return this.service.masterNodes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MasterNode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async masterNode(
    @common.Param() params: MasterNodeWhereUniqueInput
  ): Promise<MasterNode | null> {
    const result = await this.service.masterNode({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MasterNode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMasterNode(
    @common.Param() params: MasterNodeWhereUniqueInput,
    @common.Body() data: MasterNodeUpdateInput
  ): Promise<MasterNode | null> {
    try {
      return await this.service.updateMasterNode({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MasterNode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMasterNode(
    @common.Param() params: MasterNodeWhereUniqueInput
  ): Promise<MasterNode | null> {
    try {
      return await this.service.deleteMasterNode({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
