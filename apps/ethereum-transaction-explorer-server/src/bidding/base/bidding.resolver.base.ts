/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bidding } from "./Bidding";
import { BiddingCountArgs } from "./BiddingCountArgs";
import { BiddingFindManyArgs } from "./BiddingFindManyArgs";
import { BiddingFindUniqueArgs } from "./BiddingFindUniqueArgs";
import { DeleteBiddingArgs } from "./DeleteBiddingArgs";
import { BiddingService } from "../bidding.service";
@graphql.Resolver(() => Bidding)
export class BiddingResolverBase {
  constructor(protected readonly service: BiddingService) {}

  async _biddingsMeta(
    @graphql.Args() args: BiddingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bidding])
  async biddings(
    @graphql.Args() args: BiddingFindManyArgs
  ): Promise<Bidding[]> {
    return this.service.biddings(args);
  }

  @graphql.Query(() => Bidding, { nullable: true })
  async bidding(
    @graphql.Args() args: BiddingFindUniqueArgs
  ): Promise<Bidding | null> {
    const result = await this.service.bidding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bidding)
  async deleteBidding(
    @graphql.Args() args: DeleteBiddingArgs
  ): Promise<Bidding | null> {
    try {
      return await this.service.deleteBidding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
