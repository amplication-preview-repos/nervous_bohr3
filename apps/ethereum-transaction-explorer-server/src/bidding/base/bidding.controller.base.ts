/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BiddingService } from "../bidding.service";
import { BiddingCreateInput } from "./BiddingCreateInput";
import { Bidding } from "./Bidding";
import { BiddingFindManyArgs } from "./BiddingFindManyArgs";
import { BiddingWhereUniqueInput } from "./BiddingWhereUniqueInput";
import { BiddingUpdateInput } from "./BiddingUpdateInput";

export class BiddingControllerBase {
  constructor(protected readonly service: BiddingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bidding })
  async createBidding(
    @common.Body() data: BiddingCreateInput
  ): Promise<Bidding> {
    return await this.service.createBidding({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bidding] })
  @ApiNestedQuery(BiddingFindManyArgs)
  async biddings(@common.Req() request: Request): Promise<Bidding[]> {
    const args = plainToClass(BiddingFindManyArgs, request.query);
    return this.service.biddings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bidding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bidding(
    @common.Param() params: BiddingWhereUniqueInput
  ): Promise<Bidding | null> {
    const result = await this.service.bidding({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bidding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBidding(
    @common.Param() params: BiddingWhereUniqueInput,
    @common.Body() data: BiddingUpdateInput
  ): Promise<Bidding | null> {
    try {
      return await this.service.updateBidding({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bidding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBidding(
    @common.Param() params: BiddingWhereUniqueInput
  ): Promise<Bidding | null> {
    try {
      return await this.service.deleteBidding({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
