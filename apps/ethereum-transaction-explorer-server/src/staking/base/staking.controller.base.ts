/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StakingService } from "../staking.service";
import { StakingCreateInput } from "./StakingCreateInput";
import { Staking } from "./Staking";
import { StakingFindManyArgs } from "./StakingFindManyArgs";
import { StakingWhereUniqueInput } from "./StakingWhereUniqueInput";
import { StakingUpdateInput } from "./StakingUpdateInput";

export class StakingControllerBase {
  constructor(protected readonly service: StakingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Staking })
  async createStaking(
    @common.Body() data: StakingCreateInput
  ): Promise<Staking> {
    return await this.service.createStaking({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Staking] })
  @ApiNestedQuery(StakingFindManyArgs)
  async stakings(@common.Req() request: Request): Promise<Staking[]> {
    const args = plainToClass(StakingFindManyArgs, request.query);
    return this.service.stakings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Staking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staking(
    @common.Param() params: StakingWhereUniqueInput
  ): Promise<Staking | null> {
    const result = await this.service.staking({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Staking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStaking(
    @common.Param() params: StakingWhereUniqueInput,
    @common.Body() data: StakingUpdateInput
  ): Promise<Staking | null> {
    try {
      return await this.service.updateStaking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Staking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaking(
    @common.Param() params: StakingWhereUniqueInput
  ): Promise<Staking | null> {
    try {
      return await this.service.deleteStaking({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
