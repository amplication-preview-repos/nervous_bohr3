/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Nft } from "./Nft";
import { NftCountArgs } from "./NftCountArgs";
import { NftFindManyArgs } from "./NftFindManyArgs";
import { NftFindUniqueArgs } from "./NftFindUniqueArgs";
import { DeleteNftArgs } from "./DeleteNftArgs";
import { NftService } from "../nft.service";
@graphql.Resolver(() => Nft)
export class NftResolverBase {
  constructor(protected readonly service: NftService) {}

  async _nftsMeta(
    @graphql.Args() args: NftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Nft])
  async nfts(@graphql.Args() args: NftFindManyArgs): Promise<Nft[]> {
    return this.service.nfts(args);
  }

  @graphql.Query(() => Nft, { nullable: true })
  async nft(@graphql.Args() args: NftFindUniqueArgs): Promise<Nft | null> {
    const result = await this.service.nft(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Nft)
  async deleteNft(@graphql.Args() args: DeleteNftArgs): Promise<Nft | null> {
    try {
      return await this.service.deleteNft(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
