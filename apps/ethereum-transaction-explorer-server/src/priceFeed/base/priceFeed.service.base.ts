/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PriceFeed as PrismaPriceFeed } from "@prisma/client";

export class PriceFeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PriceFeedCountArgs, "select">
  ): Promise<number> {
    return this.prisma.priceFeed.count(args);
  }

  async priceFeeds(
    args: Prisma.PriceFeedFindManyArgs
  ): Promise<PrismaPriceFeed[]> {
    return this.prisma.priceFeed.findMany(args);
  }
  async priceFeed(
    args: Prisma.PriceFeedFindUniqueArgs
  ): Promise<PrismaPriceFeed | null> {
    return this.prisma.priceFeed.findUnique(args);
  }
  async createPriceFeed(
    args: Prisma.PriceFeedCreateArgs
  ): Promise<PrismaPriceFeed> {
    return this.prisma.priceFeed.create(args);
  }
  async updatePriceFeed(
    args: Prisma.PriceFeedUpdateArgs
  ): Promise<PrismaPriceFeed> {
    return this.prisma.priceFeed.update(args);
  }
  async deletePriceFeed(
    args: Prisma.PriceFeedDeleteArgs
  ): Promise<PrismaPriceFeed> {
    return this.prisma.priceFeed.delete(args);
  }
}
