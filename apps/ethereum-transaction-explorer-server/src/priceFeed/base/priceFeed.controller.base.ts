/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PriceFeedService } from "../priceFeed.service";
import { PriceFeedCreateInput } from "./PriceFeedCreateInput";
import { PriceFeed } from "./PriceFeed";
import { PriceFeedFindManyArgs } from "./PriceFeedFindManyArgs";
import { PriceFeedWhereUniqueInput } from "./PriceFeedWhereUniqueInput";
import { PriceFeedUpdateInput } from "./PriceFeedUpdateInput";

export class PriceFeedControllerBase {
  constructor(protected readonly service: PriceFeedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PriceFeed })
  async createPriceFeed(
    @common.Body() data: PriceFeedCreateInput
  ): Promise<PriceFeed> {
    return await this.service.createPriceFeed({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PriceFeed] })
  @ApiNestedQuery(PriceFeedFindManyArgs)
  async priceFeeds(@common.Req() request: Request): Promise<PriceFeed[]> {
    const args = plainToClass(PriceFeedFindManyArgs, request.query);
    return this.service.priceFeeds({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PriceFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async priceFeed(
    @common.Param() params: PriceFeedWhereUniqueInput
  ): Promise<PriceFeed | null> {
    const result = await this.service.priceFeed({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PriceFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePriceFeed(
    @common.Param() params: PriceFeedWhereUniqueInput,
    @common.Body() data: PriceFeedUpdateInput
  ): Promise<PriceFeed | null> {
    try {
      return await this.service.updatePriceFeed({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PriceFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePriceFeed(
    @common.Param() params: PriceFeedWhereUniqueInput
  ): Promise<PriceFeed | null> {
    try {
      return await this.service.deletePriceFeed({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
