/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SyncStatus as PrismaSyncStatus } from "@prisma/client";

export class SyncStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SyncStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.syncStatus.count(args);
  }

  async syncStatuses(
    args: Prisma.SyncStatusFindManyArgs
  ): Promise<PrismaSyncStatus[]> {
    return this.prisma.syncStatus.findMany(args);
  }
  async syncStatus(
    args: Prisma.SyncStatusFindUniqueArgs
  ): Promise<PrismaSyncStatus | null> {
    return this.prisma.syncStatus.findUnique(args);
  }
  async createSyncStatus(
    args: Prisma.SyncStatusCreateArgs
  ): Promise<PrismaSyncStatus> {
    return this.prisma.syncStatus.create(args);
  }
  async updateSyncStatus(
    args: Prisma.SyncStatusUpdateArgs
  ): Promise<PrismaSyncStatus> {
    return this.prisma.syncStatus.update(args);
  }
  async deleteSyncStatus(
    args: Prisma.SyncStatusDeleteArgs
  ): Promise<PrismaSyncStatus> {
    return this.prisma.syncStatus.delete(args);
  }
}
