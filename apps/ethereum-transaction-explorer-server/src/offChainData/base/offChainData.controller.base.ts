/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OffChainDataService } from "../offChainData.service";
import { OffChainDataCreateInput } from "./OffChainDataCreateInput";
import { OffChainData } from "./OffChainData";
import { OffChainDataFindManyArgs } from "./OffChainDataFindManyArgs";
import { OffChainDataWhereUniqueInput } from "./OffChainDataWhereUniqueInput";
import { OffChainDataUpdateInput } from "./OffChainDataUpdateInput";

export class OffChainDataControllerBase {
  constructor(protected readonly service: OffChainDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OffChainData })
  async createOffChainData(
    @common.Body() data: OffChainDataCreateInput
  ): Promise<OffChainData> {
    return await this.service.createOffChainData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OffChainData] })
  @ApiNestedQuery(OffChainDataFindManyArgs)
  async offChainDataItems(
    @common.Req() request: Request
  ): Promise<OffChainData[]> {
    const args = plainToClass(OffChainDataFindManyArgs, request.query);
    return this.service.offChainDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OffChainData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async offChainData(
    @common.Param() params: OffChainDataWhereUniqueInput
  ): Promise<OffChainData | null> {
    const result = await this.service.offChainData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OffChainData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOffChainData(
    @common.Param() params: OffChainDataWhereUniqueInput,
    @common.Body() data: OffChainDataUpdateInput
  ): Promise<OffChainData | null> {
    try {
      return await this.service.updateOffChainData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OffChainData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOffChainData(
    @common.Param() params: OffChainDataWhereUniqueInput
  ): Promise<OffChainData | null> {
    try {
      return await this.service.deleteOffChainData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
