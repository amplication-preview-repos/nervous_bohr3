/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OffChainData } from "./OffChainData";
import { OffChainDataCountArgs } from "./OffChainDataCountArgs";
import { OffChainDataFindManyArgs } from "./OffChainDataFindManyArgs";
import { OffChainDataFindUniqueArgs } from "./OffChainDataFindUniqueArgs";
import { DeleteOffChainDataArgs } from "./DeleteOffChainDataArgs";
import { OffChainDataService } from "../offChainData.service";
@graphql.Resolver(() => OffChainData)
export class OffChainDataResolverBase {
  constructor(protected readonly service: OffChainDataService) {}

  async _offChainDataItemsMeta(
    @graphql.Args() args: OffChainDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OffChainData])
  async offChainDataItems(
    @graphql.Args() args: OffChainDataFindManyArgs
  ): Promise<OffChainData[]> {
    return this.service.offChainDataItems(args);
  }

  @graphql.Query(() => OffChainData, { nullable: true })
  async offChainData(
    @graphql.Args() args: OffChainDataFindUniqueArgs
  ): Promise<OffChainData | null> {
    const result = await this.service.offChainData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OffChainData)
  async deleteOffChainData(
    @graphql.Args() args: DeleteOffChainDataArgs
  ): Promise<OffChainData | null> {
    try {
      return await this.service.deleteOffChainData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
