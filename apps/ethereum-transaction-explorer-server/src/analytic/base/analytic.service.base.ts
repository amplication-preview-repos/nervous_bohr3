/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Analytic as PrismaAnalytic } from "@prisma/client";

export class AnalyticServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AnalyticCountArgs, "select">): Promise<number> {
    return this.prisma.analytic.count(args);
  }

  async analytics(
    args: Prisma.AnalyticFindManyArgs
  ): Promise<PrismaAnalytic[]> {
    return this.prisma.analytic.findMany(args);
  }
  async analytic(
    args: Prisma.AnalyticFindUniqueArgs
  ): Promise<PrismaAnalytic | null> {
    return this.prisma.analytic.findUnique(args);
  }
  async createAnalytic(
    args: Prisma.AnalyticCreateArgs
  ): Promise<PrismaAnalytic> {
    return this.prisma.analytic.create(args);
  }
  async updateAnalytic(
    args: Prisma.AnalyticUpdateArgs
  ): Promise<PrismaAnalytic> {
    return this.prisma.analytic.update(args);
  }
  async deleteAnalytic(
    args: Prisma.AnalyticDeleteArgs
  ): Promise<PrismaAnalytic> {
    return this.prisma.analytic.delete(args);
  }
}
