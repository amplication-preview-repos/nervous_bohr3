/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Analytic } from "./Analytic";
import { AnalyticCountArgs } from "./AnalyticCountArgs";
import { AnalyticFindManyArgs } from "./AnalyticFindManyArgs";
import { AnalyticFindUniqueArgs } from "./AnalyticFindUniqueArgs";
import { DeleteAnalyticArgs } from "./DeleteAnalyticArgs";
import { AnalyticService } from "../analytic.service";
@graphql.Resolver(() => Analytic)
export class AnalyticResolverBase {
  constructor(protected readonly service: AnalyticService) {}

  async _analyticsMeta(
    @graphql.Args() args: AnalyticCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Analytic])
  async analytics(
    @graphql.Args() args: AnalyticFindManyArgs
  ): Promise<Analytic[]> {
    return this.service.analytics(args);
  }

  @graphql.Query(() => Analytic, { nullable: true })
  async analytic(
    @graphql.Args() args: AnalyticFindUniqueArgs
  ): Promise<Analytic | null> {
    const result = await this.service.analytic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Analytic)
  async deleteAnalytic(
    @graphql.Args() args: DeleteAnalyticArgs
  ): Promise<Analytic | null> {
    try {
      return await this.service.deleteAnalytic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
