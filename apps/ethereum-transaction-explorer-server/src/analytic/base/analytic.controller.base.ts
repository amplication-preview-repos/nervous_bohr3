/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnalyticService } from "../analytic.service";
import { AnalyticCreateInput } from "./AnalyticCreateInput";
import { Analytic } from "./Analytic";
import { AnalyticFindManyArgs } from "./AnalyticFindManyArgs";
import { AnalyticWhereUniqueInput } from "./AnalyticWhereUniqueInput";
import { AnalyticUpdateInput } from "./AnalyticUpdateInput";

export class AnalyticControllerBase {
  constructor(protected readonly service: AnalyticService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Analytic })
  async createAnalytic(
    @common.Body() data: AnalyticCreateInput
  ): Promise<Analytic> {
    return await this.service.createAnalytic({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Analytic] })
  @ApiNestedQuery(AnalyticFindManyArgs)
  async analytics(@common.Req() request: Request): Promise<Analytic[]> {
    const args = plainToClass(AnalyticFindManyArgs, request.query);
    return this.service.analytics({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Analytic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async analytic(
    @common.Param() params: AnalyticWhereUniqueInput
  ): Promise<Analytic | null> {
    const result = await this.service.analytic({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Analytic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnalytic(
    @common.Param() params: AnalyticWhereUniqueInput,
    @common.Body() data: AnalyticUpdateInput
  ): Promise<Analytic | null> {
    try {
      return await this.service.updateAnalytic({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Analytic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnalytic(
    @common.Param() params: AnalyticWhereUniqueInput
  ): Promise<Analytic | null> {
    try {
      return await this.service.deleteAnalytic({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
