/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GasService } from "../gas.service";
import { GasCreateInput } from "./GasCreateInput";
import { Gas } from "./Gas";
import { GasFindManyArgs } from "./GasFindManyArgs";
import { GasWhereUniqueInput } from "./GasWhereUniqueInput";
import { GasUpdateInput } from "./GasUpdateInput";

export class GasControllerBase {
  constructor(protected readonly service: GasService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gas })
  async createGas(@common.Body() data: GasCreateInput): Promise<Gas> {
    return await this.service.createGas({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gas] })
  @ApiNestedQuery(GasFindManyArgs)
  async gases(@common.Req() request: Request): Promise<Gas[]> {
    const args = plainToClass(GasFindManyArgs, request.query);
    return this.service.gases({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gas(@common.Param() params: GasWhereUniqueInput): Promise<Gas | null> {
    const result = await this.service.gas({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGas(
    @common.Param() params: GasWhereUniqueInput,
    @common.Body() data: GasUpdateInput
  ): Promise<Gas | null> {
    try {
      return await this.service.updateGas({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGas(
    @common.Param() params: GasWhereUniqueInput
  ): Promise<Gas | null> {
    try {
      return await this.service.deleteGas({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
