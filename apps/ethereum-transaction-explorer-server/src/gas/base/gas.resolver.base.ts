/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gas } from "./Gas";
import { GasCountArgs } from "./GasCountArgs";
import { GasFindManyArgs } from "./GasFindManyArgs";
import { GasFindUniqueArgs } from "./GasFindUniqueArgs";
import { DeleteGasArgs } from "./DeleteGasArgs";
import { GasService } from "../gas.service";
@graphql.Resolver(() => Gas)
export class GasResolverBase {
  constructor(protected readonly service: GasService) {}

  async _gasesMeta(
    @graphql.Args() args: GasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gas])
  async gases(@graphql.Args() args: GasFindManyArgs): Promise<Gas[]> {
    return this.service.gases(args);
  }

  @graphql.Query(() => Gas, { nullable: true })
  async gas(@graphql.Args() args: GasFindUniqueArgs): Promise<Gas | null> {
    const result = await this.service.gas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gas)
  async deleteGas(@graphql.Args() args: DeleteGasArgs): Promise<Gas | null> {
    try {
      return await this.service.deleteGas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
