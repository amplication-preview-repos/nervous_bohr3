/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NonceService } from "../nonce.service";
import { NonceCreateInput } from "./NonceCreateInput";
import { Nonce } from "./Nonce";
import { NonceFindManyArgs } from "./NonceFindManyArgs";
import { NonceWhereUniqueInput } from "./NonceWhereUniqueInput";
import { NonceUpdateInput } from "./NonceUpdateInput";

export class NonceControllerBase {
  constructor(protected readonly service: NonceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Nonce })
  async createNonce(@common.Body() data: NonceCreateInput): Promise<Nonce> {
    return await this.service.createNonce({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Nonce] })
  @ApiNestedQuery(NonceFindManyArgs)
  async nonces(@common.Req() request: Request): Promise<Nonce[]> {
    const args = plainToClass(NonceFindManyArgs, request.query);
    return this.service.nonces({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Nonce })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async nonce(
    @common.Param() params: NonceWhereUniqueInput
  ): Promise<Nonce | null> {
    const result = await this.service.nonce({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Nonce })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNonce(
    @common.Param() params: NonceWhereUniqueInput,
    @common.Body() data: NonceUpdateInput
  ): Promise<Nonce | null> {
    try {
      return await this.service.updateNonce({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Nonce })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNonce(
    @common.Param() params: NonceWhereUniqueInput
  ): Promise<Nonce | null> {
    try {
      return await this.service.deleteNonce({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
