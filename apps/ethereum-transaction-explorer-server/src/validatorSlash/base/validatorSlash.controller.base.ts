/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ValidatorSlashService } from "../validatorSlash.service";
import { ValidatorSlashCreateInput } from "./ValidatorSlashCreateInput";
import { ValidatorSlash } from "./ValidatorSlash";
import { ValidatorSlashFindManyArgs } from "./ValidatorSlashFindManyArgs";
import { ValidatorSlashWhereUniqueInput } from "./ValidatorSlashWhereUniqueInput";
import { ValidatorSlashUpdateInput } from "./ValidatorSlashUpdateInput";

export class ValidatorSlashControllerBase {
  constructor(protected readonly service: ValidatorSlashService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ValidatorSlash })
  async createValidatorSlash(
    @common.Body() data: ValidatorSlashCreateInput
  ): Promise<ValidatorSlash> {
    return await this.service.createValidatorSlash({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ValidatorSlash] })
  @ApiNestedQuery(ValidatorSlashFindManyArgs)
  async validatorSlashes(
    @common.Req() request: Request
  ): Promise<ValidatorSlash[]> {
    const args = plainToClass(ValidatorSlashFindManyArgs, request.query);
    return this.service.validatorSlashes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ValidatorSlash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async validatorSlash(
    @common.Param() params: ValidatorSlashWhereUniqueInput
  ): Promise<ValidatorSlash | null> {
    const result = await this.service.validatorSlash({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ValidatorSlash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateValidatorSlash(
    @common.Param() params: ValidatorSlashWhereUniqueInput,
    @common.Body() data: ValidatorSlashUpdateInput
  ): Promise<ValidatorSlash | null> {
    try {
      return await this.service.updateValidatorSlash({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ValidatorSlash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteValidatorSlash(
    @common.Param() params: ValidatorSlashWhereUniqueInput
  ): Promise<ValidatorSlash | null> {
    try {
      return await this.service.deleteValidatorSlash({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
