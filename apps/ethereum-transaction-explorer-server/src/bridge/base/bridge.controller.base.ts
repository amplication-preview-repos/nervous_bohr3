/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BridgeService } from "../bridge.service";
import { BridgeCreateInput } from "./BridgeCreateInput";
import { Bridge } from "./Bridge";
import { BridgeFindManyArgs } from "./BridgeFindManyArgs";
import { BridgeWhereUniqueInput } from "./BridgeWhereUniqueInput";
import { BridgeUpdateInput } from "./BridgeUpdateInput";

export class BridgeControllerBase {
  constructor(protected readonly service: BridgeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bridge })
  async createBridge(@common.Body() data: BridgeCreateInput): Promise<Bridge> {
    return await this.service.createBridge({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bridge] })
  @ApiNestedQuery(BridgeFindManyArgs)
  async bridges(@common.Req() request: Request): Promise<Bridge[]> {
    const args = plainToClass(BridgeFindManyArgs, request.query);
    return this.service.bridges({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bridge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bridge(
    @common.Param() params: BridgeWhereUniqueInput
  ): Promise<Bridge | null> {
    const result = await this.service.bridge({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bridge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBridge(
    @common.Param() params: BridgeWhereUniqueInput,
    @common.Body() data: BridgeUpdateInput
  ): Promise<Bridge | null> {
    try {
      return await this.service.updateBridge({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bridge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBridge(
    @common.Param() params: BridgeWhereUniqueInput
  ): Promise<Bridge | null> {
    try {
      return await this.service.deleteBridge({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
