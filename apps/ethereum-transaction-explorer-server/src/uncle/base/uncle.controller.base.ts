/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UncleService } from "../uncle.service";
import { UncleCreateInput } from "./UncleCreateInput";
import { Uncle } from "./Uncle";
import { UncleFindManyArgs } from "./UncleFindManyArgs";
import { UncleWhereUniqueInput } from "./UncleWhereUniqueInput";
import { UncleUpdateInput } from "./UncleUpdateInput";

export class UncleControllerBase {
  constructor(protected readonly service: UncleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Uncle })
  async createUncle(@common.Body() data: UncleCreateInput): Promise<Uncle> {
    return await this.service.createUncle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Uncle] })
  @ApiNestedQuery(UncleFindManyArgs)
  async uncles(@common.Req() request: Request): Promise<Uncle[]> {
    const args = plainToClass(UncleFindManyArgs, request.query);
    return this.service.uncles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Uncle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uncle(
    @common.Param() params: UncleWhereUniqueInput
  ): Promise<Uncle | null> {
    const result = await this.service.uncle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Uncle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUncle(
    @common.Param() params: UncleWhereUniqueInput,
    @common.Body() data: UncleUpdateInput
  ): Promise<Uncle | null> {
    try {
      return await this.service.updateUncle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Uncle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUncle(
    @common.Param() params: UncleWhereUniqueInput
  ): Promise<Uncle | null> {
    try {
      return await this.service.deleteUncle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
