/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Layer2TransactionService } from "../layer2Transaction.service";
import { Layer2TransactionCreateInput } from "./Layer2TransactionCreateInput";
import { Layer2Transaction } from "./Layer2Transaction";
import { Layer2TransactionFindManyArgs } from "./Layer2TransactionFindManyArgs";
import { Layer2TransactionWhereUniqueInput } from "./Layer2TransactionWhereUniqueInput";
import { Layer2TransactionUpdateInput } from "./Layer2TransactionUpdateInput";

export class Layer2TransactionControllerBase {
  constructor(protected readonly service: Layer2TransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Layer2Transaction })
  async createLayer2Transaction(
    @common.Body() data: Layer2TransactionCreateInput
  ): Promise<Layer2Transaction> {
    return await this.service.createLayer2Transaction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Layer2Transaction] })
  @ApiNestedQuery(Layer2TransactionFindManyArgs)
  async layer2Transactions(
    @common.Req() request: Request
  ): Promise<Layer2Transaction[]> {
    const args = plainToClass(Layer2TransactionFindManyArgs, request.query);
    return this.service.layer2Transactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Layer2Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async layer2Transaction(
    @common.Param() params: Layer2TransactionWhereUniqueInput
  ): Promise<Layer2Transaction | null> {
    const result = await this.service.layer2Transaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Layer2Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLayer2Transaction(
    @common.Param() params: Layer2TransactionWhereUniqueInput,
    @common.Body() data: Layer2TransactionUpdateInput
  ): Promise<Layer2Transaction | null> {
    try {
      return await this.service.updateLayer2Transaction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Layer2Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLayer2Transaction(
    @common.Param() params: Layer2TransactionWhereUniqueInput
  ): Promise<Layer2Transaction | null> {
    try {
      return await this.service.deleteLayer2Transaction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
