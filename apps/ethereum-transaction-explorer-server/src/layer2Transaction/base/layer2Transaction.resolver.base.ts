/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Layer2Transaction } from "./Layer2Transaction";
import { Layer2TransactionCountArgs } from "./Layer2TransactionCountArgs";
import { Layer2TransactionFindManyArgs } from "./Layer2TransactionFindManyArgs";
import { Layer2TransactionFindUniqueArgs } from "./Layer2TransactionFindUniqueArgs";
import { DeleteLayer2TransactionArgs } from "./DeleteLayer2TransactionArgs";
import { Layer2TransactionService } from "../layer2Transaction.service";
@graphql.Resolver(() => Layer2Transaction)
export class Layer2TransactionResolverBase {
  constructor(protected readonly service: Layer2TransactionService) {}

  async _layer2TransactionsMeta(
    @graphql.Args() args: Layer2TransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Layer2Transaction])
  async layer2Transactions(
    @graphql.Args() args: Layer2TransactionFindManyArgs
  ): Promise<Layer2Transaction[]> {
    return this.service.layer2Transactions(args);
  }

  @graphql.Query(() => Layer2Transaction, { nullable: true })
  async layer2Transaction(
    @graphql.Args() args: Layer2TransactionFindUniqueArgs
  ): Promise<Layer2Transaction | null> {
    const result = await this.service.layer2Transaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Layer2Transaction)
  async deleteLayer2Transaction(
    @graphql.Args() args: DeleteLayer2TransactionArgs
  ): Promise<Layer2Transaction | null> {
    try {
      return await this.service.deleteLayer2Transaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
