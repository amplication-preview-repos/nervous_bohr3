/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Layer2Transaction as PrismaLayer2Transaction,
} from "@prisma/client";

export class Layer2TransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Layer2TransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.layer2Transaction.count(args);
  }

  async layer2Transactions(
    args: Prisma.Layer2TransactionFindManyArgs
  ): Promise<PrismaLayer2Transaction[]> {
    return this.prisma.layer2Transaction.findMany(args);
  }
  async layer2Transaction(
    args: Prisma.Layer2TransactionFindUniqueArgs
  ): Promise<PrismaLayer2Transaction | null> {
    return this.prisma.layer2Transaction.findUnique(args);
  }
  async createLayer2Transaction(
    args: Prisma.Layer2TransactionCreateArgs
  ): Promise<PrismaLayer2Transaction> {
    return this.prisma.layer2Transaction.create(args);
  }
  async updateLayer2Transaction(
    args: Prisma.Layer2TransactionUpdateArgs
  ): Promise<PrismaLayer2Transaction> {
    return this.prisma.layer2Transaction.update(args);
  }
  async deleteLayer2Transaction(
    args: Prisma.Layer2TransactionDeleteArgs
  ): Promise<PrismaLayer2Transaction> {
    return this.prisma.layer2Transaction.delete(args);
  }
}
