/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShardService } from "../shard.service";
import { ShardCreateInput } from "./ShardCreateInput";
import { Shard } from "./Shard";
import { ShardFindManyArgs } from "./ShardFindManyArgs";
import { ShardWhereUniqueInput } from "./ShardWhereUniqueInput";
import { ShardUpdateInput } from "./ShardUpdateInput";

export class ShardControllerBase {
  constructor(protected readonly service: ShardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shard })
  async createShard(@common.Body() data: ShardCreateInput): Promise<Shard> {
    return await this.service.createShard({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shard] })
  @ApiNestedQuery(ShardFindManyArgs)
  async shards(@common.Req() request: Request): Promise<Shard[]> {
    const args = plainToClass(ShardFindManyArgs, request.query);
    return this.service.shards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shard(
    @common.Param() params: ShardWhereUniqueInput
  ): Promise<Shard | null> {
    const result = await this.service.shard({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShard(
    @common.Param() params: ShardWhereUniqueInput,
    @common.Body() data: ShardUpdateInput
  ): Promise<Shard | null> {
    try {
      return await this.service.updateShard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShard(
    @common.Param() params: ShardWhereUniqueInput
  ): Promise<Shard | null> {
    try {
      return await this.service.deleteShard({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
